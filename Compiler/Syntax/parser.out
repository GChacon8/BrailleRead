Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARITH_OP
    AT
    BREAK
    COMMENT
    EQUAL
    False
    GREATER_THAN
    GREATER_THAN_EQUAL
    LESS_THAN
    LESS_THAN_EQUAL
    MASTER
    NOT_EQUAL
    REPEAT
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> procedure_set
Rule 2     procedure_set -> procedure procedure_set
Rule 3     procedure_set -> procedure
Rule 4     procedure -> PROC ID LPAREN statements RPAREN SEMICOLON
Rule 5     statements -> statement
Rule 6     statements -> statement statements
Rule 7     statement -> variable_declaration SEMICOLON
Rule 8     statement -> variable_update SEMICOLON
Rule 9     statement -> alter_variable SEMICOLON
Rule 10    statement -> variable_with_alter SEMICOLON
Rule 11    statement -> alter_b_variable SEMICOLON
Rule 12    statement -> signal_function SEMICOLON
Rule 13    statement -> view_signal_function SEMICOLON
Rule 14    statement -> is_true_function SEMICOLON
Rule 15    statement -> case_statement SEMICOLON
Rule 16    statement -> while_statement SEMICOLON
Rule 17    statement -> until_statement SEMICOLON
Rule 18    statement -> procedure_call SEMICOLON
Rule 19    statement -> print_statement SEMICOLON
Rule 20    statement -> empty
Rule 21    variable_declaration -> NEW ID COMMA type_value
Rule 22    type_value -> LPAREN type COMMA value RPAREN
Rule 23    type -> NUM
Rule 24    type -> BOOL
Rule 25    type -> STRING
Rule 26    value -> NUMBER
Rule 27    value -> BOOLEAN
Rule 28    value -> STRING
Rule 29    value -> ID
Rule 30    value -> arith_op
Rule 31    arith_op -> math_operation
Rule 32    math_operation -> math_operation operator math_operation
Rule 33    math_operation -> math_operation operator math_value
Rule 34    math_operation -> math_value operator math_operation
Rule 35    math_operation -> math_value operator math_value
Rule 36    math_operation_paren -> LPAREN math_operation RPAREN
Rule 37    math_value -> ID
Rule 38    math_value -> NUMBER
Rule 39    math_value -> math_value_negative
Rule 40    math_value -> math_operation_paren
Rule 41    math_value_negative -> SUB ID
Rule 42    math_value_negative -> SUB NUMBER
Rule 43    operator -> ADD
Rule 44    operator -> SUB
Rule 45    operator -> MUL
Rule 46    operator -> DIV
Rule 47    operator -> REL_OP
Rule 48    variable_update -> VALUES LPAREN ID COMMA value RPAREN
Rule 49    alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN
Rule 50    variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN
Rule 51    alter_b_variable -> ALTER_B LPAREN ID RPAREN
Rule 52    signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN
Rule 53    position_state -> value
Rule 54    view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN
Rule 55    is_true_function -> IS_TRUE LPAREN ID RPAREN
Rule 56    case_statement -> CASE ID case_options
Rule 57    case_statement -> CASE ID case_options else_option
Rule 58    case_options -> when_statement
Rule 59    case_options -> when_statement case_options
Rule 60    when_statement -> WHEN value THEN LPAREN statements RPAREN
Rule 61    else_option -> ELSE LPAREN statements RPAREN
Rule 62    while_statement -> WHILE condition LPAREN statements RPAREN
Rule 63    condition -> value
Rule 64    condition -> is_true_function
Rule 65    until_statement -> UNTIL LPAREN statements RPAREN condition
Rule 66    procedure_call -> CALL LPAREN ID RPAREN
Rule 67    print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN
Rule 68    print_value_list -> print_value
Rule 69    print_value_list -> print_value COMMA print_value_list
Rule 70    print_value -> value
Rule 71    print_value -> is_true_function
Rule 72    print_value -> view_signal_function
Rule 73    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 43
ALTER                : 49
ALTER_B              : 51
ARITH_OP             : 
AT                   : 
BOOL                 : 24
BOOLEAN              : 27
BREAK                : 
CALL                 : 66
CASE                 : 56 57
COMMA                : 21 22 48 49 49 50 52 69
COMMENT              : 
DIV                  : 46
ELSE                 : 61
EQUAL                : 
False                : 
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
ID                   : 4 21 29 37 41 48 49 50 51 55 56 57 66
IS_TRUE              : 55
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LPAREN               : 4 22 36 48 49 50 51 52 54 55 60 61 62 65 66 67
MASTER               : 
MUL                  : 45
NEW                  : 21
NOT_EQUAL            : 
NUM                  : 23
NUMBER               : 26 38 42
PRINT_VALUES         : 67
PROC                 : 4
REL_OP               : 47
REPEAT               : 
RPAREN               : 4 22 36 48 49 50 51 52 54 55 60 61 62 65 66 67
SEMICOLON            : 4 7 8 9 10 11 12 13 14 15 16 17 18 19
SIGNAL               : 52
STRING               : 25 28
SUB                  : 41 42 44
THEN                 : 60
TRUE                 : 
UNTIL                : 65
VALUES               : 48 50
VIEW_SIGNAL          : 54
WHEN                 : 60
WHILE                : 62
error                : 

Nonterminals, with rules where they appear

alter_b_variable     : 11
alter_variable       : 9 50
arith_op             : 30
case_options         : 56 57 59
case_statement       : 15
condition            : 62 65
else_option          : 57
empty                : 20
is_true_function     : 14 64 71
math_operation       : 31 32 32 33 34 36
math_operation_paren : 40
math_value           : 33 34 35 35
math_value_negative  : 39
operator             : 32 33 34 35 49
position_state       : 52 52 54
print_statement      : 19
print_value          : 68 69
print_value_list     : 67 69
procedure            : 2 3
procedure_call       : 18
procedure_set        : 1 2
program              : 0
signal_function      : 12
statement            : 5 6
statements           : 4 6 60 61 62 65
type                 : 22
type_value           : 21
until_statement      : 17
value                : 22 48 49 53 60 63 70
variable_declaration : 7
variable_update      : 8
variable_with_alter  : 10
view_signal_function : 13 72
when_statement       : 58 59
while_statement      : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . procedure_set
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    PROC            shift and go to state 4

    program                        shift and go to state 1
    procedure_set                  shift and go to state 2
    procedure                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> procedure_set .

    $end            reduce using rule 1 (program -> procedure_set .)


state 3

    (2) procedure_set -> procedure . procedure_set
    (3) procedure_set -> procedure .
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    $end            reduce using rule 3 (procedure_set -> procedure .)
    PROC            shift and go to state 4

    procedure                      shift and go to state 3
    procedure_set                  shift and go to state 5

state 4

    (4) procedure -> PROC . ID LPAREN statements RPAREN SEMICOLON

    ID              shift and go to state 6


state 5

    (2) procedure_set -> procedure procedure_set .

    $end            reduce using rule 2 (procedure_set -> procedure procedure_set .)


state 6

    (4) procedure -> PROC ID . LPAREN statements RPAREN SEMICOLON

    LPAREN          shift and go to state 7


state 7

    (4) procedure -> PROC ID LPAREN . statements RPAREN SEMICOLON
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . procedure_call SEMICOLON
    (19) statement -> . print_statement SEMICOLON
    (20) statement -> . empty
    (21) variable_declaration -> . NEW ID COMMA type_value
    (48) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (50) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (51) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (52) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) case_statement -> . CASE ID case_options
    (57) case_statement -> . CASE ID case_options else_option
    (62) while_statement -> . WHILE condition LPAREN statements RPAREN
    (65) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (66) procedure_call -> . CALL LPAREN ID RPAREN
    (67) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (73) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 24
    VALUES          shift and go to state 25
    ALTER           shift and go to state 26
    ALTER_B         shift and go to state 27
    SIGNAL          shift and go to state 28
    VIEW_SIGNAL     shift and go to state 29
    IS_TRUE         shift and go to state 30
    CASE            shift and go to state 31
    WHILE           shift and go to state 32
    UNTIL           shift and go to state 33
    CALL            shift and go to state 34
    PRINT_VALUES    shift and go to state 35
    RPAREN          reduce using rule 73 (empty -> .)

  ! NEW             [ reduce using rule 73 (empty -> .) ]
  ! VALUES          [ reduce using rule 73 (empty -> .) ]
  ! ALTER           [ reduce using rule 73 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 73 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 73 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 73 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 73 (empty -> .) ]
  ! CASE            [ reduce using rule 73 (empty -> .) ]
  ! WHILE           [ reduce using rule 73 (empty -> .) ]
  ! UNTIL           [ reduce using rule 73 (empty -> .) ]
  ! CALL            [ reduce using rule 73 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 73 (empty -> .) ]

    statements                     shift and go to state 8
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    procedure_call                 shift and go to state 21
    print_statement                shift and go to state 22
    empty                          shift and go to state 23

state 8

    (4) procedure -> PROC ID LPAREN statements . RPAREN SEMICOLON

    RPAREN          shift and go to state 36


state 9

    (5) statements -> statement .
    (6) statements -> statement . statements
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . procedure_call SEMICOLON
    (19) statement -> . print_statement SEMICOLON
    (20) statement -> . empty
    (21) variable_declaration -> . NEW ID COMMA type_value
    (48) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (50) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (51) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (52) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) case_statement -> . CASE ID case_options
    (57) case_statement -> . CASE ID case_options else_option
    (62) while_statement -> . WHILE condition LPAREN statements RPAREN
    (65) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (66) procedure_call -> . CALL LPAREN ID RPAREN
    (67) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (73) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (statements -> statement .)
    RPAREN          reduce using rule 5 (statements -> statement .)
    NEW             shift and go to state 24
    VALUES          shift and go to state 25
    ALTER           shift and go to state 26
    ALTER_B         shift and go to state 27
    SIGNAL          shift and go to state 28
    VIEW_SIGNAL     shift and go to state 29
    IS_TRUE         shift and go to state 30
    CASE            shift and go to state 31
    WHILE           shift and go to state 32
    UNTIL           shift and go to state 33
    CALL            shift and go to state 34
    PRINT_VALUES    shift and go to state 35

  ! NEW             [ reduce using rule 73 (empty -> .) ]
  ! VALUES          [ reduce using rule 73 (empty -> .) ]
  ! ALTER           [ reduce using rule 73 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 73 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 73 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 73 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 73 (empty -> .) ]
  ! CASE            [ reduce using rule 73 (empty -> .) ]
  ! WHILE           [ reduce using rule 73 (empty -> .) ]
  ! UNTIL           [ reduce using rule 73 (empty -> .) ]
  ! CALL            [ reduce using rule 73 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 73 (empty -> .) ]
  ! RPAREN          [ reduce using rule 73 (empty -> .) ]

    statement                      shift and go to state 9
    statements                     shift and go to state 37
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    procedure_call                 shift and go to state 21
    print_statement                shift and go to state 22
    empty                          shift and go to state 23

state 10

    (7) statement -> variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 38


state 11

    (8) statement -> variable_update . SEMICOLON

    SEMICOLON       shift and go to state 39


state 12

    (9) statement -> alter_variable . SEMICOLON

    SEMICOLON       shift and go to state 40


state 13

    (10) statement -> variable_with_alter . SEMICOLON

    SEMICOLON       shift and go to state 41


state 14

    (11) statement -> alter_b_variable . SEMICOLON

    SEMICOLON       shift and go to state 42


state 15

    (12) statement -> signal_function . SEMICOLON

    SEMICOLON       shift and go to state 43


state 16

    (13) statement -> view_signal_function . SEMICOLON

    SEMICOLON       shift and go to state 44


state 17

    (14) statement -> is_true_function . SEMICOLON

    SEMICOLON       shift and go to state 45


state 18

    (15) statement -> case_statement . SEMICOLON

    SEMICOLON       shift and go to state 46


state 19

    (16) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 47


state 20

    (17) statement -> until_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 21

    (18) statement -> procedure_call . SEMICOLON

    SEMICOLON       shift and go to state 49


state 22

    (19) statement -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 50


state 23

    (20) statement -> empty .

    NEW             reduce using rule 20 (statement -> empty .)
    VALUES          reduce using rule 20 (statement -> empty .)
    ALTER           reduce using rule 20 (statement -> empty .)
    ALTER_B         reduce using rule 20 (statement -> empty .)
    SIGNAL          reduce using rule 20 (statement -> empty .)
    VIEW_SIGNAL     reduce using rule 20 (statement -> empty .)
    IS_TRUE         reduce using rule 20 (statement -> empty .)
    CASE            reduce using rule 20 (statement -> empty .)
    WHILE           reduce using rule 20 (statement -> empty .)
    UNTIL           reduce using rule 20 (statement -> empty .)
    CALL            reduce using rule 20 (statement -> empty .)
    PRINT_VALUES    reduce using rule 20 (statement -> empty .)
    RPAREN          reduce using rule 20 (statement -> empty .)


state 24

    (21) variable_declaration -> NEW . ID COMMA type_value

    ID              shift and go to state 51


state 25

    (48) variable_update -> VALUES . LPAREN ID COMMA value RPAREN
    (50) variable_with_alter -> VALUES . LPAREN ID COMMA alter_variable RPAREN

    LPAREN          shift and go to state 52


state 26

    (49) alter_variable -> ALTER . LPAREN ID COMMA operator COMMA value RPAREN

    LPAREN          shift and go to state 53


state 27

    (51) alter_b_variable -> ALTER_B . LPAREN ID RPAREN

    LPAREN          shift and go to state 54


state 28

    (52) signal_function -> SIGNAL . LPAREN position_state COMMA position_state RPAREN

    LPAREN          shift and go to state 55


state 29

    (54) view_signal_function -> VIEW_SIGNAL . LPAREN position_state RPAREN

    LPAREN          shift and go to state 56


state 30

    (55) is_true_function -> IS_TRUE . LPAREN ID RPAREN

    LPAREN          shift and go to state 57


state 31

    (56) case_statement -> CASE . ID case_options
    (57) case_statement -> CASE . ID case_options else_option

    ID              shift and go to state 58


state 32

    (62) while_statement -> WHILE . condition LPAREN statements RPAREN
    (63) condition -> . value
    (64) condition -> . is_true_function
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    IS_TRUE         shift and go to state 30
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    condition                      shift and go to state 59
    value                          shift and go to state 61
    is_true_function               shift and go to state 62
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 33

    (65) until_statement -> UNTIL . LPAREN statements RPAREN condition

    LPAREN          shift and go to state 73


state 34

    (66) procedure_call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 74


state 35

    (67) print_statement -> PRINT_VALUES . LPAREN print_value_list RPAREN

    LPAREN          shift and go to state 75


state 36

    (4) procedure -> PROC ID LPAREN statements RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 76


state 37

    (6) statements -> statement statements .

    RPAREN          reduce using rule 6 (statements -> statement statements .)


state 38

    (7) statement -> variable_declaration SEMICOLON .

    NEW             reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VALUES          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER_B         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    SIGNAL          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    IS_TRUE         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CASE            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    UNTIL           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CALL            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    PRINT_VALUES    reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    RPAREN          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)


state 39

    (8) statement -> variable_update SEMICOLON .

    NEW             reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VALUES          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER_B         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    SIGNAL          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 8 (statement -> variable_update SEMICOLON .)
    IS_TRUE         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CASE            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    UNTIL           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CALL            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    PRINT_VALUES    reduce using rule 8 (statement -> variable_update SEMICOLON .)
    RPAREN          reduce using rule 8 (statement -> variable_update SEMICOLON .)


state 40

    (9) statement -> alter_variable SEMICOLON .

    NEW             reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VALUES          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER_B         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    SIGNAL          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    IS_TRUE         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CASE            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    UNTIL           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CALL            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    RPAREN          reduce using rule 9 (statement -> alter_variable SEMICOLON .)


state 41

    (10) statement -> variable_with_alter SEMICOLON .

    NEW             reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VALUES          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER_B         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    SIGNAL          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    IS_TRUE         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CASE            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    UNTIL           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CALL            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    PRINT_VALUES    reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    RPAREN          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)


state 42

    (11) statement -> alter_b_variable SEMICOLON .

    NEW             reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VALUES          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER_B         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    SIGNAL          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    IS_TRUE         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CASE            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    UNTIL           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CALL            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    RPAREN          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)


state 43

    (12) statement -> signal_function SEMICOLON .

    NEW             reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VALUES          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER_B         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    SIGNAL          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 12 (statement -> signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CASE            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    UNTIL           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CALL            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 12 (statement -> signal_function SEMICOLON .)
    RPAREN          reduce using rule 12 (statement -> signal_function SEMICOLON .)


state 44

    (13) statement -> view_signal_function SEMICOLON .

    NEW             reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    VALUES          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    ALTER_B         reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    SIGNAL          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    CASE            reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    UNTIL           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    CALL            reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    RPAREN          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)


state 45

    (14) statement -> is_true_function SEMICOLON .

    NEW             reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    VALUES          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    ALTER_B         reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    SIGNAL          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    IS_TRUE         reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    CASE            reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    UNTIL           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    CALL            reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    RPAREN          reduce using rule 14 (statement -> is_true_function SEMICOLON .)


state 46

    (15) statement -> case_statement SEMICOLON .

    NEW             reduce using rule 15 (statement -> case_statement SEMICOLON .)
    VALUES          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    ALTER_B         reduce using rule 15 (statement -> case_statement SEMICOLON .)
    SIGNAL          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 15 (statement -> case_statement SEMICOLON .)
    IS_TRUE         reduce using rule 15 (statement -> case_statement SEMICOLON .)
    CASE            reduce using rule 15 (statement -> case_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    UNTIL           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    CALL            reduce using rule 15 (statement -> case_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 15 (statement -> case_statement SEMICOLON .)
    RPAREN          reduce using rule 15 (statement -> case_statement SEMICOLON .)


state 47

    (16) statement -> while_statement SEMICOLON .

    NEW             reduce using rule 16 (statement -> while_statement SEMICOLON .)
    VALUES          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    ALTER_B         reduce using rule 16 (statement -> while_statement SEMICOLON .)
    SIGNAL          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 16 (statement -> while_statement SEMICOLON .)
    IS_TRUE         reduce using rule 16 (statement -> while_statement SEMICOLON .)
    CASE            reduce using rule 16 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    UNTIL           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    CALL            reduce using rule 16 (statement -> while_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 16 (statement -> while_statement SEMICOLON .)
    RPAREN          reduce using rule 16 (statement -> while_statement SEMICOLON .)


state 48

    (17) statement -> until_statement SEMICOLON .

    NEW             reduce using rule 17 (statement -> until_statement SEMICOLON .)
    VALUES          reduce using rule 17 (statement -> until_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    ALTER_B         reduce using rule 17 (statement -> until_statement SEMICOLON .)
    SIGNAL          reduce using rule 17 (statement -> until_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 17 (statement -> until_statement SEMICOLON .)
    IS_TRUE         reduce using rule 17 (statement -> until_statement SEMICOLON .)
    CASE            reduce using rule 17 (statement -> until_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    UNTIL           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    CALL            reduce using rule 17 (statement -> until_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 17 (statement -> until_statement SEMICOLON .)
    RPAREN          reduce using rule 17 (statement -> until_statement SEMICOLON .)


state 49

    (18) statement -> procedure_call SEMICOLON .

    NEW             reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    VALUES          reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    ALTER_B         reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    SIGNAL          reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    IS_TRUE         reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    CASE            reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    UNTIL           reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    CALL            reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    PRINT_VALUES    reduce using rule 18 (statement -> procedure_call SEMICOLON .)
    RPAREN          reduce using rule 18 (statement -> procedure_call SEMICOLON .)


state 50

    (19) statement -> print_statement SEMICOLON .

    NEW             reduce using rule 19 (statement -> print_statement SEMICOLON .)
    VALUES          reduce using rule 19 (statement -> print_statement SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> print_statement SEMICOLON .)
    ALTER_B         reduce using rule 19 (statement -> print_statement SEMICOLON .)
    SIGNAL          reduce using rule 19 (statement -> print_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 19 (statement -> print_statement SEMICOLON .)
    IS_TRUE         reduce using rule 19 (statement -> print_statement SEMICOLON .)
    CASE            reduce using rule 19 (statement -> print_statement SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> print_statement SEMICOLON .)
    UNTIL           reduce using rule 19 (statement -> print_statement SEMICOLON .)
    CALL            reduce using rule 19 (statement -> print_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 19 (statement -> print_statement SEMICOLON .)
    RPAREN          reduce using rule 19 (statement -> print_statement SEMICOLON .)


state 51

    (21) variable_declaration -> NEW ID . COMMA type_value

    COMMA           shift and go to state 77


state 52

    (48) variable_update -> VALUES LPAREN . ID COMMA value RPAREN
    (50) variable_with_alter -> VALUES LPAREN . ID COMMA alter_variable RPAREN

    ID              shift and go to state 78


state 53

    (49) alter_variable -> ALTER LPAREN . ID COMMA operator COMMA value RPAREN

    ID              shift and go to state 79


state 54

    (51) alter_b_variable -> ALTER_B LPAREN . ID RPAREN

    ID              shift and go to state 80


state 55

    (52) signal_function -> SIGNAL LPAREN . position_state COMMA position_state RPAREN
    (53) position_state -> . value
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    position_state                 shift and go to state 81
    value                          shift and go to state 82
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 56

    (54) view_signal_function -> VIEW_SIGNAL LPAREN . position_state RPAREN
    (53) position_state -> . value
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    position_state                 shift and go to state 83
    value                          shift and go to state 82
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 57

    (55) is_true_function -> IS_TRUE LPAREN . ID RPAREN

    ID              shift and go to state 84


state 58

    (56) case_statement -> CASE ID . case_options
    (57) case_statement -> CASE ID . case_options else_option
    (58) case_options -> . when_statement
    (59) case_options -> . when_statement case_options
    (60) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    WHEN            shift and go to state 87

    case_options                   shift and go to state 85
    when_statement                 shift and go to state 86

state 59

    (62) while_statement -> WHILE condition . LPAREN statements RPAREN

    LPAREN          shift and go to state 88


state 60

    (36) math_operation_paren -> LPAREN . math_operation RPAREN
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 90
    NUMBER          shift and go to state 91
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    math_operation                 shift and go to state 89
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 61

    (63) condition -> value .

    LPAREN          reduce using rule 63 (condition -> value .)
    SEMICOLON       reduce using rule 63 (condition -> value .)


state 62

    (64) condition -> is_true_function .

    LPAREN          reduce using rule 64 (condition -> is_true_function .)
    SEMICOLON       reduce using rule 64 (condition -> is_true_function .)


state 63

    (26) value -> NUMBER .
    (38) math_value -> NUMBER .

    LPAREN          reduce using rule 26 (value -> NUMBER .)
    COMMA           reduce using rule 26 (value -> NUMBER .)
    RPAREN          reduce using rule 26 (value -> NUMBER .)
    THEN            reduce using rule 26 (value -> NUMBER .)
    SEMICOLON       reduce using rule 26 (value -> NUMBER .)
    ADD             reduce using rule 38 (math_value -> NUMBER .)
    SUB             reduce using rule 38 (math_value -> NUMBER .)
    MUL             reduce using rule 38 (math_value -> NUMBER .)
    DIV             reduce using rule 38 (math_value -> NUMBER .)
    REL_OP          reduce using rule 38 (math_value -> NUMBER .)


state 64

    (27) value -> BOOLEAN .

    LPAREN          reduce using rule 27 (value -> BOOLEAN .)
    COMMA           reduce using rule 27 (value -> BOOLEAN .)
    RPAREN          reduce using rule 27 (value -> BOOLEAN .)
    THEN            reduce using rule 27 (value -> BOOLEAN .)
    SEMICOLON       reduce using rule 27 (value -> BOOLEAN .)


state 65

    (28) value -> STRING .

    LPAREN          reduce using rule 28 (value -> STRING .)
    COMMA           reduce using rule 28 (value -> STRING .)
    RPAREN          reduce using rule 28 (value -> STRING .)
    THEN            reduce using rule 28 (value -> STRING .)
    SEMICOLON       reduce using rule 28 (value -> STRING .)


state 66

    (29) value -> ID .
    (37) math_value -> ID .

    LPAREN          reduce using rule 29 (value -> ID .)
    COMMA           reduce using rule 29 (value -> ID .)
    RPAREN          reduce using rule 29 (value -> ID .)
    THEN            reduce using rule 29 (value -> ID .)
    SEMICOLON       reduce using rule 29 (value -> ID .)
    ADD             reduce using rule 37 (math_value -> ID .)
    SUB             reduce using rule 37 (math_value -> ID .)
    MUL             reduce using rule 37 (math_value -> ID .)
    DIV             reduce using rule 37 (math_value -> ID .)
    REL_OP          reduce using rule 37 (math_value -> ID .)


state 67

    (30) value -> arith_op .

    LPAREN          reduce using rule 30 (value -> arith_op .)
    COMMA           reduce using rule 30 (value -> arith_op .)
    RPAREN          reduce using rule 30 (value -> arith_op .)
    THEN            reduce using rule 30 (value -> arith_op .)
    SEMICOLON       reduce using rule 30 (value -> arith_op .)


state 68

    (31) arith_op -> math_operation .
    (32) math_operation -> math_operation . operator math_operation
    (33) math_operation -> math_operation . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

    LPAREN          reduce using rule 31 (arith_op -> math_operation .)
    COMMA           reduce using rule 31 (arith_op -> math_operation .)
    RPAREN          reduce using rule 31 (arith_op -> math_operation .)
    THEN            reduce using rule 31 (arith_op -> math_operation .)
    SEMICOLON       reduce using rule 31 (arith_op -> math_operation .)
    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

    operator                       shift and go to state 92

state 69

    (34) math_operation -> math_value . operator math_operation
    (35) math_operation -> math_value . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

    operator                       shift and go to state 98

state 70

    (39) math_value -> math_value_negative .

    ADD             reduce using rule 39 (math_value -> math_value_negative .)
    SUB             reduce using rule 39 (math_value -> math_value_negative .)
    MUL             reduce using rule 39 (math_value -> math_value_negative .)
    DIV             reduce using rule 39 (math_value -> math_value_negative .)
    REL_OP          reduce using rule 39 (math_value -> math_value_negative .)
    LPAREN          reduce using rule 39 (math_value -> math_value_negative .)
    COMMA           reduce using rule 39 (math_value -> math_value_negative .)
    RPAREN          reduce using rule 39 (math_value -> math_value_negative .)
    THEN            reduce using rule 39 (math_value -> math_value_negative .)
    SEMICOLON       reduce using rule 39 (math_value -> math_value_negative .)


state 71

    (40) math_value -> math_operation_paren .

    ADD             reduce using rule 40 (math_value -> math_operation_paren .)
    SUB             reduce using rule 40 (math_value -> math_operation_paren .)
    MUL             reduce using rule 40 (math_value -> math_operation_paren .)
    DIV             reduce using rule 40 (math_value -> math_operation_paren .)
    REL_OP          reduce using rule 40 (math_value -> math_operation_paren .)
    LPAREN          reduce using rule 40 (math_value -> math_operation_paren .)
    COMMA           reduce using rule 40 (math_value -> math_operation_paren .)
    RPAREN          reduce using rule 40 (math_value -> math_operation_paren .)
    THEN            reduce using rule 40 (math_value -> math_operation_paren .)
    SEMICOLON       reduce using rule 40 (math_value -> math_operation_paren .)


state 72

    (41) math_value_negative -> SUB . ID
    (42) math_value_negative -> SUB . NUMBER

    ID              shift and go to state 99
    NUMBER          shift and go to state 100


state 73

    (65) until_statement -> UNTIL LPAREN . statements RPAREN condition
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . procedure_call SEMICOLON
    (19) statement -> . print_statement SEMICOLON
    (20) statement -> . empty
    (21) variable_declaration -> . NEW ID COMMA type_value
    (48) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (50) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (51) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (52) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) case_statement -> . CASE ID case_options
    (57) case_statement -> . CASE ID case_options else_option
    (62) while_statement -> . WHILE condition LPAREN statements RPAREN
    (65) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (66) procedure_call -> . CALL LPAREN ID RPAREN
    (67) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (73) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 24
    VALUES          shift and go to state 25
    ALTER           shift and go to state 26
    ALTER_B         shift and go to state 27
    SIGNAL          shift and go to state 28
    VIEW_SIGNAL     shift and go to state 29
    IS_TRUE         shift and go to state 30
    CASE            shift and go to state 31
    WHILE           shift and go to state 32
    UNTIL           shift and go to state 33
    CALL            shift and go to state 34
    PRINT_VALUES    shift and go to state 35
    RPAREN          reduce using rule 73 (empty -> .)

  ! NEW             [ reduce using rule 73 (empty -> .) ]
  ! VALUES          [ reduce using rule 73 (empty -> .) ]
  ! ALTER           [ reduce using rule 73 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 73 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 73 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 73 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 73 (empty -> .) ]
  ! CASE            [ reduce using rule 73 (empty -> .) ]
  ! WHILE           [ reduce using rule 73 (empty -> .) ]
  ! UNTIL           [ reduce using rule 73 (empty -> .) ]
  ! CALL            [ reduce using rule 73 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 73 (empty -> .) ]

    statements                     shift and go to state 101
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    procedure_call                 shift and go to state 21
    print_statement                shift and go to state 22
    empty                          shift and go to state 23

state 74

    (66) procedure_call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 102


state 75

    (67) print_statement -> PRINT_VALUES LPAREN . print_value_list RPAREN
    (68) print_value_list -> . print_value
    (69) print_value_list -> . print_value COMMA print_value_list
    (70) print_value -> . value
    (71) print_value -> . is_true_function
    (72) print_value -> . view_signal_function
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    IS_TRUE         shift and go to state 30
    VIEW_SIGNAL     shift and go to state 29
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    print_value_list               shift and go to state 103
    print_value                    shift and go to state 104
    value                          shift and go to state 105
    is_true_function               shift and go to state 106
    view_signal_function           shift and go to state 107
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 76

    (4) procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .

    PROC            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)
    $end            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)


state 77

    (21) variable_declaration -> NEW ID COMMA . type_value
    (22) type_value -> . LPAREN type COMMA value RPAREN

    LPAREN          shift and go to state 109

    type_value                     shift and go to state 108

state 78

    (48) variable_update -> VALUES LPAREN ID . COMMA value RPAREN
    (50) variable_with_alter -> VALUES LPAREN ID . COMMA alter_variable RPAREN

    COMMA           shift and go to state 110


state 79

    (49) alter_variable -> ALTER LPAREN ID . COMMA operator COMMA value RPAREN

    COMMA           shift and go to state 111


state 80

    (51) alter_b_variable -> ALTER_B LPAREN ID . RPAREN

    RPAREN          shift and go to state 112


state 81

    (52) signal_function -> SIGNAL LPAREN position_state . COMMA position_state RPAREN

    COMMA           shift and go to state 113


state 82

    (53) position_state -> value .

    COMMA           reduce using rule 53 (position_state -> value .)
    RPAREN          reduce using rule 53 (position_state -> value .)


state 83

    (54) view_signal_function -> VIEW_SIGNAL LPAREN position_state . RPAREN

    RPAREN          shift and go to state 114


state 84

    (55) is_true_function -> IS_TRUE LPAREN ID . RPAREN

    RPAREN          shift and go to state 115


state 85

    (56) case_statement -> CASE ID case_options .
    (57) case_statement -> CASE ID case_options . else_option
    (61) else_option -> . ELSE LPAREN statements RPAREN

    SEMICOLON       reduce using rule 56 (case_statement -> CASE ID case_options .)
    ELSE            shift and go to state 117

    else_option                    shift and go to state 116

state 86

    (58) case_options -> when_statement .
    (59) case_options -> when_statement . case_options
    (58) case_options -> . when_statement
    (59) case_options -> . when_statement case_options
    (60) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    ELSE            reduce using rule 58 (case_options -> when_statement .)
    SEMICOLON       reduce using rule 58 (case_options -> when_statement .)
    WHEN            shift and go to state 87

    when_statement                 shift and go to state 86
    case_options                   shift and go to state 118

state 87

    (60) when_statement -> WHEN . value THEN LPAREN statements RPAREN
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    value                          shift and go to state 119
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 88

    (62) while_statement -> WHILE condition LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . procedure_call SEMICOLON
    (19) statement -> . print_statement SEMICOLON
    (20) statement -> . empty
    (21) variable_declaration -> . NEW ID COMMA type_value
    (48) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (50) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (51) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (52) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) case_statement -> . CASE ID case_options
    (57) case_statement -> . CASE ID case_options else_option
    (62) while_statement -> . WHILE condition LPAREN statements RPAREN
    (65) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (66) procedure_call -> . CALL LPAREN ID RPAREN
    (67) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (73) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 24
    VALUES          shift and go to state 25
    ALTER           shift and go to state 26
    ALTER_B         shift and go to state 27
    SIGNAL          shift and go to state 28
    VIEW_SIGNAL     shift and go to state 29
    IS_TRUE         shift and go to state 30
    CASE            shift and go to state 31
    WHILE           shift and go to state 32
    UNTIL           shift and go to state 33
    CALL            shift and go to state 34
    PRINT_VALUES    shift and go to state 35
    RPAREN          reduce using rule 73 (empty -> .)

  ! NEW             [ reduce using rule 73 (empty -> .) ]
  ! VALUES          [ reduce using rule 73 (empty -> .) ]
  ! ALTER           [ reduce using rule 73 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 73 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 73 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 73 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 73 (empty -> .) ]
  ! CASE            [ reduce using rule 73 (empty -> .) ]
  ! WHILE           [ reduce using rule 73 (empty -> .) ]
  ! UNTIL           [ reduce using rule 73 (empty -> .) ]
  ! CALL            [ reduce using rule 73 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 73 (empty -> .) ]

    statements                     shift and go to state 120
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    procedure_call                 shift and go to state 21
    print_statement                shift and go to state 22
    empty                          shift and go to state 23

state 89

    (36) math_operation_paren -> LPAREN math_operation . RPAREN
    (32) math_operation -> math_operation . operator math_operation
    (33) math_operation -> math_operation . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

    RPAREN          shift and go to state 121
    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

    operator                       shift and go to state 92

state 90

    (37) math_value -> ID .

    ADD             reduce using rule 37 (math_value -> ID .)
    SUB             reduce using rule 37 (math_value -> ID .)
    MUL             reduce using rule 37 (math_value -> ID .)
    DIV             reduce using rule 37 (math_value -> ID .)
    REL_OP          reduce using rule 37 (math_value -> ID .)
    LPAREN          reduce using rule 37 (math_value -> ID .)
    COMMA           reduce using rule 37 (math_value -> ID .)
    RPAREN          reduce using rule 37 (math_value -> ID .)
    THEN            reduce using rule 37 (math_value -> ID .)
    SEMICOLON       reduce using rule 37 (math_value -> ID .)


state 91

    (38) math_value -> NUMBER .

    ADD             reduce using rule 38 (math_value -> NUMBER .)
    SUB             reduce using rule 38 (math_value -> NUMBER .)
    MUL             reduce using rule 38 (math_value -> NUMBER .)
    DIV             reduce using rule 38 (math_value -> NUMBER .)
    REL_OP          reduce using rule 38 (math_value -> NUMBER .)
    LPAREN          reduce using rule 38 (math_value -> NUMBER .)
    COMMA           reduce using rule 38 (math_value -> NUMBER .)
    RPAREN          reduce using rule 38 (math_value -> NUMBER .)
    THEN            reduce using rule 38 (math_value -> NUMBER .)
    SEMICOLON       reduce using rule 38 (math_value -> NUMBER .)


state 92

    (32) math_operation -> math_operation operator . math_operation
    (33) math_operation -> math_operation operator . math_value
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 90
    NUMBER          shift and go to state 91
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    math_operation                 shift and go to state 122
    math_value                     shift and go to state 123
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 93

    (43) operator -> ADD .

    ID              reduce using rule 43 (operator -> ADD .)
    NUMBER          reduce using rule 43 (operator -> ADD .)
    SUB             reduce using rule 43 (operator -> ADD .)
    LPAREN          reduce using rule 43 (operator -> ADD .)
    COMMA           reduce using rule 43 (operator -> ADD .)


state 94

    (44) operator -> SUB .

    ID              reduce using rule 44 (operator -> SUB .)
    NUMBER          reduce using rule 44 (operator -> SUB .)
    SUB             reduce using rule 44 (operator -> SUB .)
    LPAREN          reduce using rule 44 (operator -> SUB .)
    COMMA           reduce using rule 44 (operator -> SUB .)


state 95

    (45) operator -> MUL .

    ID              reduce using rule 45 (operator -> MUL .)
    NUMBER          reduce using rule 45 (operator -> MUL .)
    SUB             reduce using rule 45 (operator -> MUL .)
    LPAREN          reduce using rule 45 (operator -> MUL .)
    COMMA           reduce using rule 45 (operator -> MUL .)


state 96

    (46) operator -> DIV .

    ID              reduce using rule 46 (operator -> DIV .)
    NUMBER          reduce using rule 46 (operator -> DIV .)
    SUB             reduce using rule 46 (operator -> DIV .)
    LPAREN          reduce using rule 46 (operator -> DIV .)
    COMMA           reduce using rule 46 (operator -> DIV .)


state 97

    (47) operator -> REL_OP .

    ID              reduce using rule 47 (operator -> REL_OP .)
    NUMBER          reduce using rule 47 (operator -> REL_OP .)
    SUB             reduce using rule 47 (operator -> REL_OP .)
    LPAREN          reduce using rule 47 (operator -> REL_OP .)
    COMMA           reduce using rule 47 (operator -> REL_OP .)


state 98

    (34) math_operation -> math_value operator . math_operation
    (35) math_operation -> math_value operator . math_value
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 90
    NUMBER          shift and go to state 91
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    math_value                     shift and go to state 124
    math_operation                 shift and go to state 125
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 99

    (41) math_value_negative -> SUB ID .

    ADD             reduce using rule 41 (math_value_negative -> SUB ID .)
    SUB             reduce using rule 41 (math_value_negative -> SUB ID .)
    MUL             reduce using rule 41 (math_value_negative -> SUB ID .)
    DIV             reduce using rule 41 (math_value_negative -> SUB ID .)
    REL_OP          reduce using rule 41 (math_value_negative -> SUB ID .)
    LPAREN          reduce using rule 41 (math_value_negative -> SUB ID .)
    COMMA           reduce using rule 41 (math_value_negative -> SUB ID .)
    RPAREN          reduce using rule 41 (math_value_negative -> SUB ID .)
    THEN            reduce using rule 41 (math_value_negative -> SUB ID .)
    SEMICOLON       reduce using rule 41 (math_value_negative -> SUB ID .)


state 100

    (42) math_value_negative -> SUB NUMBER .

    ADD             reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    SUB             reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    MUL             reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    DIV             reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    REL_OP          reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    LPAREN          reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    COMMA           reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    RPAREN          reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    THEN            reduce using rule 42 (math_value_negative -> SUB NUMBER .)
    SEMICOLON       reduce using rule 42 (math_value_negative -> SUB NUMBER .)


state 101

    (65) until_statement -> UNTIL LPAREN statements . RPAREN condition

    RPAREN          shift and go to state 126


state 102

    (66) procedure_call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 127


state 103

    (67) print_statement -> PRINT_VALUES LPAREN print_value_list . RPAREN

    RPAREN          shift and go to state 128


state 104

    (68) print_value_list -> print_value .
    (69) print_value_list -> print_value . COMMA print_value_list

    RPAREN          reduce using rule 68 (print_value_list -> print_value .)
    COMMA           shift and go to state 129


state 105

    (70) print_value -> value .

    COMMA           reduce using rule 70 (print_value -> value .)
    RPAREN          reduce using rule 70 (print_value -> value .)


state 106

    (71) print_value -> is_true_function .

    COMMA           reduce using rule 71 (print_value -> is_true_function .)
    RPAREN          reduce using rule 71 (print_value -> is_true_function .)


state 107

    (72) print_value -> view_signal_function .

    COMMA           reduce using rule 72 (print_value -> view_signal_function .)
    RPAREN          reduce using rule 72 (print_value -> view_signal_function .)


state 108

    (21) variable_declaration -> NEW ID COMMA type_value .

    SEMICOLON       reduce using rule 21 (variable_declaration -> NEW ID COMMA type_value .)


state 109

    (22) type_value -> LPAREN . type COMMA value RPAREN
    (23) type -> . NUM
    (24) type -> . BOOL
    (25) type -> . STRING

    NUM             shift and go to state 131
    BOOL            shift and go to state 132
    STRING          shift and go to state 133

    type                           shift and go to state 130

state 110

    (48) variable_update -> VALUES LPAREN ID COMMA . value RPAREN
    (50) variable_with_alter -> VALUES LPAREN ID COMMA . alter_variable RPAREN
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    ALTER           shift and go to state 26
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    value                          shift and go to state 134
    alter_variable                 shift and go to state 135
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 111

    (49) alter_variable -> ALTER LPAREN ID COMMA . operator COMMA value RPAREN
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

    operator                       shift and go to state 136

state 112

    (51) alter_b_variable -> ALTER_B LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 51 (alter_b_variable -> ALTER_B LPAREN ID RPAREN .)


state 113

    (52) signal_function -> SIGNAL LPAREN position_state COMMA . position_state RPAREN
    (53) position_state -> . value
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    position_state                 shift and go to state 137
    value                          shift and go to state 82
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 114

    (54) view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .

    SEMICOLON       reduce using rule 54 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    COMMA           reduce using rule 54 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    RPAREN          reduce using rule 54 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)


state 115

    (55) is_true_function -> IS_TRUE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 55 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    LPAREN          reduce using rule 55 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    COMMA           reduce using rule 55 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 55 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)


state 116

    (57) case_statement -> CASE ID case_options else_option .

    SEMICOLON       reduce using rule 57 (case_statement -> CASE ID case_options else_option .)


state 117

    (61) else_option -> ELSE . LPAREN statements RPAREN

    LPAREN          shift and go to state 138


state 118

    (59) case_options -> when_statement case_options .

    ELSE            reduce using rule 59 (case_options -> when_statement case_options .)
    SEMICOLON       reduce using rule 59 (case_options -> when_statement case_options .)


state 119

    (60) when_statement -> WHEN value . THEN LPAREN statements RPAREN

    THEN            shift and go to state 139


state 120

    (62) while_statement -> WHILE condition LPAREN statements . RPAREN

    RPAREN          shift and go to state 140


state 121

    (36) math_operation_paren -> LPAREN math_operation RPAREN .

    ADD             reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SUB             reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    MUL             reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    DIV             reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    REL_OP          reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    LPAREN          reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    COMMA           reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    RPAREN          reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    THEN            reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SEMICOLON       reduce using rule 36 (math_operation_paren -> LPAREN math_operation RPAREN .)


state 122

    (32) math_operation -> math_operation operator math_operation .
    (32) math_operation -> math_operation . operator math_operation
    (33) math_operation -> math_operation . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 32 (math_operation -> math_operation operator math_operation .)
    COMMA           reduce using rule 32 (math_operation -> math_operation operator math_operation .)
    RPAREN          reduce using rule 32 (math_operation -> math_operation operator math_operation .)
    THEN            reduce using rule 32 (math_operation -> math_operation operator math_operation .)
    SEMICOLON       reduce using rule 32 (math_operation -> math_operation operator math_operation .)
    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

  ! ADD             [ reduce using rule 32 (math_operation -> math_operation operator math_operation .) ]
  ! SUB             [ reduce using rule 32 (math_operation -> math_operation operator math_operation .) ]
  ! MUL             [ reduce using rule 32 (math_operation -> math_operation operator math_operation .) ]
  ! DIV             [ reduce using rule 32 (math_operation -> math_operation operator math_operation .) ]
  ! REL_OP          [ reduce using rule 32 (math_operation -> math_operation operator math_operation .) ]

    operator                       shift and go to state 92

state 123

    (33) math_operation -> math_operation operator math_value .
    (34) math_operation -> math_value . operator math_operation
    (35) math_operation -> math_value . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 33 (math_operation -> math_operation operator math_value .)
    COMMA           reduce using rule 33 (math_operation -> math_operation operator math_value .)
    RPAREN          reduce using rule 33 (math_operation -> math_operation operator math_value .)
    THEN            reduce using rule 33 (math_operation -> math_operation operator math_value .)
    SEMICOLON       reduce using rule 33 (math_operation -> math_operation operator math_value .)
    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

  ! ADD             [ reduce using rule 33 (math_operation -> math_operation operator math_value .) ]
  ! SUB             [ reduce using rule 33 (math_operation -> math_operation operator math_value .) ]
  ! MUL             [ reduce using rule 33 (math_operation -> math_operation operator math_value .) ]
  ! DIV             [ reduce using rule 33 (math_operation -> math_operation operator math_value .) ]
  ! REL_OP          [ reduce using rule 33 (math_operation -> math_operation operator math_value .) ]

    operator                       shift and go to state 98

state 124

    (35) math_operation -> math_value operator math_value .
    (34) math_operation -> math_value . operator math_operation
    (35) math_operation -> math_value . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 35 (math_operation -> math_value operator math_value .)
    COMMA           reduce using rule 35 (math_operation -> math_value operator math_value .)
    RPAREN          reduce using rule 35 (math_operation -> math_value operator math_value .)
    THEN            reduce using rule 35 (math_operation -> math_value operator math_value .)
    SEMICOLON       reduce using rule 35 (math_operation -> math_value operator math_value .)
    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

  ! ADD             [ reduce using rule 35 (math_operation -> math_value operator math_value .) ]
  ! SUB             [ reduce using rule 35 (math_operation -> math_value operator math_value .) ]
  ! MUL             [ reduce using rule 35 (math_operation -> math_value operator math_value .) ]
  ! DIV             [ reduce using rule 35 (math_operation -> math_value operator math_value .) ]
  ! REL_OP          [ reduce using rule 35 (math_operation -> math_value operator math_value .) ]

    operator                       shift and go to state 98

state 125

    (34) math_operation -> math_value operator math_operation .
    (32) math_operation -> math_operation . operator math_operation
    (33) math_operation -> math_operation . operator math_value
    (43) operator -> . ADD
    (44) operator -> . SUB
    (45) operator -> . MUL
    (46) operator -> . DIV
    (47) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 34 (math_operation -> math_value operator math_operation .)
    COMMA           reduce using rule 34 (math_operation -> math_value operator math_operation .)
    RPAREN          reduce using rule 34 (math_operation -> math_value operator math_operation .)
    THEN            reduce using rule 34 (math_operation -> math_value operator math_operation .)
    SEMICOLON       reduce using rule 34 (math_operation -> math_value operator math_operation .)
    ADD             shift and go to state 93
    SUB             shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    REL_OP          shift and go to state 97

  ! ADD             [ reduce using rule 34 (math_operation -> math_value operator math_operation .) ]
  ! SUB             [ reduce using rule 34 (math_operation -> math_value operator math_operation .) ]
  ! MUL             [ reduce using rule 34 (math_operation -> math_value operator math_operation .) ]
  ! DIV             [ reduce using rule 34 (math_operation -> math_value operator math_operation .) ]
  ! REL_OP          [ reduce using rule 34 (math_operation -> math_value operator math_operation .) ]

    operator                       shift and go to state 92

state 126

    (65) until_statement -> UNTIL LPAREN statements RPAREN . condition
    (63) condition -> . value
    (64) condition -> . is_true_function
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    IS_TRUE         shift and go to state 30
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    condition                      shift and go to state 141
    value                          shift and go to state 61
    is_true_function               shift and go to state 62
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 127

    (66) procedure_call -> CALL LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 66 (procedure_call -> CALL LPAREN ID RPAREN .)


state 128

    (67) print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .

    SEMICOLON       reduce using rule 67 (print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .)


state 129

    (69) print_value_list -> print_value COMMA . print_value_list
    (68) print_value_list -> . print_value
    (69) print_value_list -> . print_value COMMA print_value_list
    (70) print_value -> . value
    (71) print_value -> . is_true_function
    (72) print_value -> . view_signal_function
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    IS_TRUE         shift and go to state 30
    VIEW_SIGNAL     shift and go to state 29
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    print_value                    shift and go to state 104
    print_value_list               shift and go to state 142
    value                          shift and go to state 105
    is_true_function               shift and go to state 106
    view_signal_function           shift and go to state 107
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 130

    (22) type_value -> LPAREN type . COMMA value RPAREN

    COMMA           shift and go to state 143


state 131

    (23) type -> NUM .

    COMMA           reduce using rule 23 (type -> NUM .)


state 132

    (24) type -> BOOL .

    COMMA           reduce using rule 24 (type -> BOOL .)


state 133

    (25) type -> STRING .

    COMMA           reduce using rule 25 (type -> STRING .)


state 134

    (48) variable_update -> VALUES LPAREN ID COMMA value . RPAREN

    RPAREN          shift and go to state 144


state 135

    (50) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable . RPAREN

    RPAREN          shift and go to state 145


state 136

    (49) alter_variable -> ALTER LPAREN ID COMMA operator . COMMA value RPAREN

    COMMA           shift and go to state 146


state 137

    (52) signal_function -> SIGNAL LPAREN position_state COMMA position_state . RPAREN

    RPAREN          shift and go to state 147


state 138

    (61) else_option -> ELSE LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . procedure_call SEMICOLON
    (19) statement -> . print_statement SEMICOLON
    (20) statement -> . empty
    (21) variable_declaration -> . NEW ID COMMA type_value
    (48) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (50) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (51) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (52) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) case_statement -> . CASE ID case_options
    (57) case_statement -> . CASE ID case_options else_option
    (62) while_statement -> . WHILE condition LPAREN statements RPAREN
    (65) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (66) procedure_call -> . CALL LPAREN ID RPAREN
    (67) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (73) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 24
    VALUES          shift and go to state 25
    ALTER           shift and go to state 26
    ALTER_B         shift and go to state 27
    SIGNAL          shift and go to state 28
    VIEW_SIGNAL     shift and go to state 29
    IS_TRUE         shift and go to state 30
    CASE            shift and go to state 31
    WHILE           shift and go to state 32
    UNTIL           shift and go to state 33
    CALL            shift and go to state 34
    PRINT_VALUES    shift and go to state 35
    RPAREN          reduce using rule 73 (empty -> .)

  ! NEW             [ reduce using rule 73 (empty -> .) ]
  ! VALUES          [ reduce using rule 73 (empty -> .) ]
  ! ALTER           [ reduce using rule 73 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 73 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 73 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 73 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 73 (empty -> .) ]
  ! CASE            [ reduce using rule 73 (empty -> .) ]
  ! WHILE           [ reduce using rule 73 (empty -> .) ]
  ! UNTIL           [ reduce using rule 73 (empty -> .) ]
  ! CALL            [ reduce using rule 73 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 73 (empty -> .) ]

    statements                     shift and go to state 148
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    procedure_call                 shift and go to state 21
    print_statement                shift and go to state 22
    empty                          shift and go to state 23

state 139

    (60) when_statement -> WHEN value THEN . LPAREN statements RPAREN

    LPAREN          shift and go to state 149


state 140

    (62) while_statement -> WHILE condition LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 62 (while_statement -> WHILE condition LPAREN statements RPAREN .)


state 141

    (65) until_statement -> UNTIL LPAREN statements RPAREN condition .

    SEMICOLON       reduce using rule 65 (until_statement -> UNTIL LPAREN statements RPAREN condition .)


state 142

    (69) print_value_list -> print_value COMMA print_value_list .

    RPAREN          reduce using rule 69 (print_value_list -> print_value COMMA print_value_list .)


state 143

    (22) type_value -> LPAREN type COMMA . value RPAREN
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    value                          shift and go to state 150
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 144

    (48) variable_update -> VALUES LPAREN ID COMMA value RPAREN .

    SEMICOLON       reduce using rule 48 (variable_update -> VALUES LPAREN ID COMMA value RPAREN .)


state 145

    (50) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .

    SEMICOLON       reduce using rule 50 (variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .)


state 146

    (49) alter_variable -> ALTER LPAREN ID COMMA operator COMMA . value RPAREN
    (26) value -> . NUMBER
    (27) value -> . BOOLEAN
    (28) value -> . STRING
    (29) value -> . ID
    (30) value -> . arith_op
    (31) arith_op -> . math_operation
    (32) math_operation -> . math_operation operator math_operation
    (33) math_operation -> . math_operation operator math_value
    (34) math_operation -> . math_value operator math_operation
    (35) math_operation -> . math_value operator math_value
    (37) math_value -> . ID
    (38) math_value -> . NUMBER
    (39) math_value -> . math_value_negative
    (40) math_value -> . math_operation_paren
    (41) math_value_negative -> . SUB ID
    (42) math_value_negative -> . SUB NUMBER
    (36) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 63
    BOOLEAN         shift and go to state 64
    STRING          shift and go to state 65
    ID              shift and go to state 66
    SUB             shift and go to state 72
    LPAREN          shift and go to state 60

    value                          shift and go to state 151
    arith_op                       shift and go to state 67
    math_operation                 shift and go to state 68
    math_value                     shift and go to state 69
    math_value_negative            shift and go to state 70
    math_operation_paren           shift and go to state 71

state 147

    (52) signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .

    SEMICOLON       reduce using rule 52 (signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .)


state 148

    (61) else_option -> ELSE LPAREN statements . RPAREN

    RPAREN          shift and go to state 152


state 149

    (60) when_statement -> WHEN value THEN LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . procedure_call SEMICOLON
    (19) statement -> . print_statement SEMICOLON
    (20) statement -> . empty
    (21) variable_declaration -> . NEW ID COMMA type_value
    (48) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (49) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (50) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (51) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (52) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (54) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (55) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) case_statement -> . CASE ID case_options
    (57) case_statement -> . CASE ID case_options else_option
    (62) while_statement -> . WHILE condition LPAREN statements RPAREN
    (65) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (66) procedure_call -> . CALL LPAREN ID RPAREN
    (67) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (73) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 24
    VALUES          shift and go to state 25
    ALTER           shift and go to state 26
    ALTER_B         shift and go to state 27
    SIGNAL          shift and go to state 28
    VIEW_SIGNAL     shift and go to state 29
    IS_TRUE         shift and go to state 30
    CASE            shift and go to state 31
    WHILE           shift and go to state 32
    UNTIL           shift and go to state 33
    CALL            shift and go to state 34
    PRINT_VALUES    shift and go to state 35
    RPAREN          reduce using rule 73 (empty -> .)

  ! NEW             [ reduce using rule 73 (empty -> .) ]
  ! VALUES          [ reduce using rule 73 (empty -> .) ]
  ! ALTER           [ reduce using rule 73 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 73 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 73 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 73 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 73 (empty -> .) ]
  ! CASE            [ reduce using rule 73 (empty -> .) ]
  ! WHILE           [ reduce using rule 73 (empty -> .) ]
  ! UNTIL           [ reduce using rule 73 (empty -> .) ]
  ! CALL            [ reduce using rule 73 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 73 (empty -> .) ]

    statements                     shift and go to state 153
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    procedure_call                 shift and go to state 21
    print_statement                shift and go to state 22
    empty                          shift and go to state 23

state 150

    (22) type_value -> LPAREN type COMMA value . RPAREN

    RPAREN          shift and go to state 154


state 151

    (49) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value . RPAREN

    RPAREN          shift and go to state 155


state 152

    (61) else_option -> ELSE LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 61 (else_option -> ELSE LPAREN statements RPAREN .)


state 153

    (60) when_statement -> WHEN value THEN LPAREN statements . RPAREN

    RPAREN          shift and go to state 156


state 154

    (22) type_value -> LPAREN type COMMA value RPAREN .

    SEMICOLON       reduce using rule 22 (type_value -> LPAREN type COMMA value RPAREN .)


state 155

    (49) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .

    SEMICOLON       reduce using rule 49 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)
    RPAREN          reduce using rule 49 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)


state 156

    (60) when_statement -> WHEN value THEN LPAREN statements RPAREN .

    WHEN            reduce using rule 60 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    ELSE            reduce using rule 60 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    SEMICOLON       reduce using rule 60 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEW in state 7 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 7 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 7 resolved as shift
WARNING: shift/reduce conflict for CASE in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 7 resolved as shift
WARNING: shift/reduce conflict for CALL in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for NEW in state 9 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 9 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 9 resolved as shift
WARNING: shift/reduce conflict for CASE in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 9 resolved as shift
WARNING: shift/reduce conflict for CALL in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for NEW in state 73 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 73 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 73 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 73 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 73 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 73 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 73 resolved as shift
WARNING: shift/reduce conflict for CASE in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 73 resolved as shift
WARNING: shift/reduce conflict for CALL in state 73 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 73 resolved as shift
WARNING: shift/reduce conflict for NEW in state 88 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 88 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 88 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 88 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 88 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 88 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 88 resolved as shift
WARNING: shift/reduce conflict for CASE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 88 resolved as shift
WARNING: shift/reduce conflict for CALL in state 88 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 88 resolved as shift
WARNING: shift/reduce conflict for ADD in state 122 resolved as shift
WARNING: shift/reduce conflict for SUB in state 122 resolved as shift
WARNING: shift/reduce conflict for MUL in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV in state 122 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 122 resolved as shift
WARNING: shift/reduce conflict for ADD in state 123 resolved as shift
WARNING: shift/reduce conflict for SUB in state 123 resolved as shift
WARNING: shift/reduce conflict for MUL in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV in state 123 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 123 resolved as shift
WARNING: shift/reduce conflict for ADD in state 124 resolved as shift
WARNING: shift/reduce conflict for SUB in state 124 resolved as shift
WARNING: shift/reduce conflict for MUL in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV in state 124 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 124 resolved as shift
WARNING: shift/reduce conflict for ADD in state 125 resolved as shift
WARNING: shift/reduce conflict for SUB in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV in state 125 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 125 resolved as shift
WARNING: shift/reduce conflict for NEW in state 138 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 138 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 138 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 138 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 138 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 138 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 138 resolved as shift
WARNING: shift/reduce conflict for CASE in state 138 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 138 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 138 resolved as shift
WARNING: shift/reduce conflict for CALL in state 138 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 138 resolved as shift
WARNING: shift/reduce conflict for NEW in state 149 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 149 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 149 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 149 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 149 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 149 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 149 resolved as shift
WARNING: shift/reduce conflict for CASE in state 149 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 149 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 149 resolved as shift
WARNING: shift/reduce conflict for CALL in state 149 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 9
