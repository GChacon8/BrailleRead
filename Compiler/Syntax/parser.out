Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> procedure_set
Rule 2     procedure_set -> procedure procedure_set
Rule 3     procedure_set -> procedure
Rule 4     procedure -> PROC ID LPAREN statements RPAREN SEMICOLON
Rule 5     statements -> statement
Rule 6     statements -> statement statements
Rule 7     statement -> variable_declaration SEMICOLON
Rule 8     statement -> variable_update SEMICOLON
Rule 9     statement -> alter_variable SEMICOLON
Rule 10    statement -> variable_with_alter SEMICOLON
Rule 11    statement -> alter_b_variable SEMICOLON
Rule 12    statement -> signal_function SEMICOLON
Rule 13    statement -> end_signal_function SEMICOLON
Rule 14    statement -> view_signal_function SEMICOLON
Rule 15    statement -> is_true_function SEMICOLON
Rule 16    statement -> case_statement SEMICOLON
Rule 17    statement -> while_statement SEMICOLON
Rule 18    statement -> until_statement SEMICOLON
Rule 19    statement -> repeat_statement SEMICOLON
Rule 20    statement -> procedure_call SEMICOLON
Rule 21    statement -> print_statement SEMICOLON
Rule 22    statement -> write_statement SEMICOLON
Rule 23    statement -> break SEMICOLON
Rule 24    statement -> empty
Rule 25    variable_declaration -> NEW ID COMMA type_value
Rule 26    type_value -> LPAREN type COMMA value RPAREN
Rule 27    type -> NUM
Rule 28    type -> BOOL
Rule 29    type -> STRING
Rule 30    value -> NUMBER
Rule 31    value -> BOOLEAN
Rule 32    value -> STRING
Rule 33    value -> ID
Rule 34    value -> arith_op
Rule 35    arith_op -> math_operation
Rule 36    math_operation -> math_operation operator math_operation
Rule 37    math_operation -> math_operation operator math_value
Rule 38    math_operation -> math_value operator math_operation
Rule 39    math_operation -> math_value operator math_value
Rule 40    math_operation_paren -> LPAREN math_operation RPAREN
Rule 41    math_value -> ID
Rule 42    math_value -> NUMBER
Rule 43    math_value -> math_value_negative
Rule 44    math_value -> math_operation_paren
Rule 45    math_value_negative -> SUB ID
Rule 46    math_value_negative -> SUB NUMBER
Rule 47    operator -> ADD
Rule 48    operator -> SUB
Rule 49    operator -> MUL
Rule 50    operator -> DIV
Rule 51    operator -> REL_OP
Rule 52    variable_update -> VALUES LPAREN ID COMMA value RPAREN
Rule 53    alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN
Rule 54    variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN
Rule 55    alter_b_variable -> ALTER_B LPAREN ID RPAREN
Rule 56    signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN
Rule 57    position_state -> value
Rule 58    end_signal_function -> END_SIGNAL LPAREN RPAREN
Rule 59    view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN
Rule 60    is_true_function -> IS_TRUE LPAREN ID RPAREN
Rule 61    case_statement -> CASE ID case_options
Rule 62    case_statement -> CASE ID case_options else_option
Rule 63    case_options -> when_statement
Rule 64    case_options -> when_statement case_options
Rule 65    when_statement -> WHEN value THEN LPAREN statements RPAREN
Rule 66    else_option -> ELSE LPAREN statements RPAREN
Rule 67    while_statement -> WHILE condition LPAREN statements RPAREN
Rule 68    condition -> value
Rule 69    condition -> is_true_function
Rule 70    until_statement -> UNTIL LPAREN statements RPAREN condition
Rule 71    repeat_statement -> REPEAT LPAREN statements RPAREN
Rule 72    procedure_call -> CALL LPAREN ID RPAREN
Rule 73    print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN
Rule 74    print_value_list -> print_value
Rule 75    print_value_list -> print_value COMMA print_value_list
Rule 76    print_value -> value
Rule 77    print_value -> is_true_function
Rule 78    print_value -> view_signal_function
Rule 79    write_statement -> WRITE LPAREN print_value_list RPAREN
Rule 80    break -> BREAK
Rule 81    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 47
ALTER                : 53
ALTER_B              : 55
BOOL                 : 28
BOOLEAN              : 31
BREAK                : 80
CALL                 : 72
CASE                 : 61 62
COMMA                : 25 26 52 53 53 54 56 75
DIV                  : 50
ELSE                 : 66
END_SIGNAL           : 58
ID                   : 4 25 33 41 45 52 53 54 55 60 61 62 72
IS_TRUE              : 60
LPAREN               : 4 26 40 52 53 54 55 56 58 59 60 65 66 67 70 71 72 73 79
MUL                  : 49
NEW                  : 25
NUM                  : 27
NUMBER               : 30 42 46
PRINT_VALUES         : 73
PROC                 : 4
REL_OP               : 51
REPEAT               : 71
RPAREN               : 4 26 40 52 53 54 55 56 58 59 60 65 66 67 70 71 72 73 79
SEMICOLON            : 4 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
SIGNAL               : 56
STRING               : 29 32
SUB                  : 45 46 48
THEN                 : 65
UNTIL                : 70
VALUES               : 52 54
VIEW_SIGNAL          : 59
WHEN                 : 65
WHILE                : 67
WRITE                : 79
error                : 

Nonterminals, with rules where they appear

alter_b_variable     : 11
alter_variable       : 9 54
arith_op             : 34
break                : 23
case_options         : 61 62 64
case_statement       : 16
condition            : 67 70
else_option          : 62
empty                : 24
end_signal_function  : 13
is_true_function     : 15 69 77
math_operation       : 35 36 36 37 38 40
math_operation_paren : 44
math_value           : 37 38 39 39
math_value_negative  : 43
operator             : 36 37 38 39 53
position_state       : 56 56 59
print_statement      : 21
print_value          : 74 75
print_value_list     : 73 75 79
procedure            : 2 3
procedure_call       : 20
procedure_set        : 1 2
program              : 0
repeat_statement     : 19
signal_function      : 12
statement            : 5 6
statements           : 4 6 65 66 67 70 71
type                 : 26
type_value           : 25
until_statement      : 18
value                : 26 52 53 57 65 68 76
variable_declaration : 7
variable_update      : 8
variable_with_alter  : 10
view_signal_function : 14 78
when_statement       : 63 64
while_statement      : 17
write_statement      : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . procedure_set
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    PROC            shift and go to state 4

    program                        shift and go to state 1
    procedure_set                  shift and go to state 2
    procedure                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> procedure_set .

    $end            reduce using rule 1 (program -> procedure_set .)


state 3

    (2) procedure_set -> procedure . procedure_set
    (3) procedure_set -> procedure .
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    $end            reduce using rule 3 (procedure_set -> procedure .)
    PROC            shift and go to state 4

    procedure                      shift and go to state 3
    procedure_set                  shift and go to state 5

state 4

    (4) procedure -> PROC . ID LPAREN statements RPAREN SEMICOLON

    ID              shift and go to state 6


state 5

    (2) procedure_set -> procedure procedure_set .

    $end            reduce using rule 2 (procedure_set -> procedure procedure_set .)


state 6

    (4) procedure -> PROC ID . LPAREN statements RPAREN SEMICOLON

    LPAREN          shift and go to state 7


state 7

    (4) procedure -> PROC ID LPAREN . statements RPAREN SEMICOLON
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43
    RPAREN          reduce using rule 81 (empty -> .)

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 8
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 8

    (4) procedure -> PROC ID LPAREN statements . RPAREN SEMICOLON

    RPAREN          shift and go to state 44


state 9

    (5) statements -> statement .
    (6) statements -> statement . statements
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (statements -> statement .)
    RPAREN          reduce using rule 5 (statements -> statement .)
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]
  ! RPAREN          [ reduce using rule 81 (empty -> .) ]

    statement                      shift and go to state 9
    statements                     shift and go to state 45
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 10

    (7) statement -> variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 46


state 11

    (8) statement -> variable_update . SEMICOLON

    SEMICOLON       shift and go to state 47


state 12

    (9) statement -> alter_variable . SEMICOLON

    SEMICOLON       shift and go to state 48


state 13

    (10) statement -> variable_with_alter . SEMICOLON

    SEMICOLON       shift and go to state 49


state 14

    (11) statement -> alter_b_variable . SEMICOLON

    SEMICOLON       shift and go to state 50


state 15

    (12) statement -> signal_function . SEMICOLON

    SEMICOLON       shift and go to state 51


state 16

    (13) statement -> end_signal_function . SEMICOLON

    SEMICOLON       shift and go to state 52


state 17

    (14) statement -> view_signal_function . SEMICOLON

    SEMICOLON       shift and go to state 53


state 18

    (15) statement -> is_true_function . SEMICOLON

    SEMICOLON       shift and go to state 54


state 19

    (16) statement -> case_statement . SEMICOLON

    SEMICOLON       shift and go to state 55


state 20

    (17) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 56


state 21

    (18) statement -> until_statement . SEMICOLON

    SEMICOLON       shift and go to state 57


state 22

    (19) statement -> repeat_statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 23

    (20) statement -> procedure_call . SEMICOLON

    SEMICOLON       shift and go to state 59


state 24

    (21) statement -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 25

    (22) statement -> write_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 26

    (23) statement -> break . SEMICOLON

    SEMICOLON       shift and go to state 62


state 27

    (24) statement -> empty .

    NEW             reduce using rule 24 (statement -> empty .)
    VALUES          reduce using rule 24 (statement -> empty .)
    ALTER           reduce using rule 24 (statement -> empty .)
    ALTER_B         reduce using rule 24 (statement -> empty .)
    SIGNAL          reduce using rule 24 (statement -> empty .)
    END_SIGNAL      reduce using rule 24 (statement -> empty .)
    VIEW_SIGNAL     reduce using rule 24 (statement -> empty .)
    IS_TRUE         reduce using rule 24 (statement -> empty .)
    CASE            reduce using rule 24 (statement -> empty .)
    WHILE           reduce using rule 24 (statement -> empty .)
    UNTIL           reduce using rule 24 (statement -> empty .)
    REPEAT          reduce using rule 24 (statement -> empty .)
    CALL            reduce using rule 24 (statement -> empty .)
    PRINT_VALUES    reduce using rule 24 (statement -> empty .)
    WRITE           reduce using rule 24 (statement -> empty .)
    BREAK           reduce using rule 24 (statement -> empty .)
    RPAREN          reduce using rule 24 (statement -> empty .)


state 28

    (25) variable_declaration -> NEW . ID COMMA type_value

    ID              shift and go to state 63


state 29

    (52) variable_update -> VALUES . LPAREN ID COMMA value RPAREN
    (54) variable_with_alter -> VALUES . LPAREN ID COMMA alter_variable RPAREN

    LPAREN          shift and go to state 64


state 30

    (53) alter_variable -> ALTER . LPAREN ID COMMA operator COMMA value RPAREN

    LPAREN          shift and go to state 65


state 31

    (55) alter_b_variable -> ALTER_B . LPAREN ID RPAREN

    LPAREN          shift and go to state 66


state 32

    (56) signal_function -> SIGNAL . LPAREN position_state COMMA position_state RPAREN

    LPAREN          shift and go to state 67


state 33

    (58) end_signal_function -> END_SIGNAL . LPAREN RPAREN

    LPAREN          shift and go to state 68


state 34

    (59) view_signal_function -> VIEW_SIGNAL . LPAREN position_state RPAREN

    LPAREN          shift and go to state 69


state 35

    (60) is_true_function -> IS_TRUE . LPAREN ID RPAREN

    LPAREN          shift and go to state 70


state 36

    (61) case_statement -> CASE . ID case_options
    (62) case_statement -> CASE . ID case_options else_option

    ID              shift and go to state 71


state 37

    (67) while_statement -> WHILE . condition LPAREN statements RPAREN
    (68) condition -> . value
    (69) condition -> . is_true_function
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    IS_TRUE         shift and go to state 35
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    condition                      shift and go to state 72
    value                          shift and go to state 74
    is_true_function               shift and go to state 75
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 38

    (70) until_statement -> UNTIL . LPAREN statements RPAREN condition

    LPAREN          shift and go to state 86


state 39

    (71) repeat_statement -> REPEAT . LPAREN statements RPAREN

    LPAREN          shift and go to state 87


state 40

    (72) procedure_call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 88


state 41

    (73) print_statement -> PRINT_VALUES . LPAREN print_value_list RPAREN

    LPAREN          shift and go to state 89


state 42

    (79) write_statement -> WRITE . LPAREN print_value_list RPAREN

    LPAREN          shift and go to state 90


state 43

    (80) break -> BREAK .

    SEMICOLON       reduce using rule 80 (break -> BREAK .)


state 44

    (4) procedure -> PROC ID LPAREN statements RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 91


state 45

    (6) statements -> statement statements .

    RPAREN          reduce using rule 6 (statements -> statement statements .)


state 46

    (7) statement -> variable_declaration SEMICOLON .

    NEW             reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VALUES          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER_B         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    SIGNAL          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    END_SIGNAL      reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    IS_TRUE         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CASE            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    UNTIL           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    REPEAT          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CALL            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    PRINT_VALUES    reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    WRITE           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    RPAREN          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)


state 47

    (8) statement -> variable_update SEMICOLON .

    NEW             reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VALUES          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER_B         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    SIGNAL          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    END_SIGNAL      reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 8 (statement -> variable_update SEMICOLON .)
    IS_TRUE         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CASE            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    UNTIL           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    REPEAT          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CALL            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    PRINT_VALUES    reduce using rule 8 (statement -> variable_update SEMICOLON .)
    WRITE           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    RPAREN          reduce using rule 8 (statement -> variable_update SEMICOLON .)


state 48

    (9) statement -> alter_variable SEMICOLON .

    NEW             reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VALUES          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER_B         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    SIGNAL          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    END_SIGNAL      reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    IS_TRUE         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CASE            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    UNTIL           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    REPEAT          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CALL            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    WRITE           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    RPAREN          reduce using rule 9 (statement -> alter_variable SEMICOLON .)


state 49

    (10) statement -> variable_with_alter SEMICOLON .

    NEW             reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VALUES          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER_B         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    SIGNAL          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    END_SIGNAL      reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    IS_TRUE         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CASE            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    UNTIL           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    REPEAT          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CALL            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    PRINT_VALUES    reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    WRITE           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    RPAREN          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)


state 50

    (11) statement -> alter_b_variable SEMICOLON .

    NEW             reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VALUES          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER_B         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    SIGNAL          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    END_SIGNAL      reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    IS_TRUE         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CASE            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    UNTIL           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    REPEAT          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CALL            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    WRITE           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    RPAREN          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)


state 51

    (12) statement -> signal_function SEMICOLON .

    NEW             reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VALUES          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER_B         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    SIGNAL          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    END_SIGNAL      reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 12 (statement -> signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CASE            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    UNTIL           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    REPEAT          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CALL            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 12 (statement -> signal_function SEMICOLON .)
    WRITE           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    RPAREN          reduce using rule 12 (statement -> signal_function SEMICOLON .)


state 52

    (13) statement -> end_signal_function SEMICOLON .

    NEW             reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    VALUES          reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    ALTER_B         reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    SIGNAL          reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    END_SIGNAL      reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    CASE            reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    UNTIL           reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    REPEAT          reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    CALL            reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    WRITE           reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> end_signal_function SEMICOLON .)
    RPAREN          reduce using rule 13 (statement -> end_signal_function SEMICOLON .)


state 53

    (14) statement -> view_signal_function SEMICOLON .

    NEW             reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    VALUES          reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    ALTER_B         reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    SIGNAL          reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    END_SIGNAL      reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    CASE            reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    UNTIL           reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    REPEAT          reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    CALL            reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    WRITE           reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> view_signal_function SEMICOLON .)
    RPAREN          reduce using rule 14 (statement -> view_signal_function SEMICOLON .)


state 54

    (15) statement -> is_true_function SEMICOLON .

    NEW             reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    VALUES          reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    ALTER_B         reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    SIGNAL          reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    END_SIGNAL      reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    IS_TRUE         reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    CASE            reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    UNTIL           reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    REPEAT          reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    CALL            reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    WRITE           reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    BREAK           reduce using rule 15 (statement -> is_true_function SEMICOLON .)
    RPAREN          reduce using rule 15 (statement -> is_true_function SEMICOLON .)


state 55

    (16) statement -> case_statement SEMICOLON .

    NEW             reduce using rule 16 (statement -> case_statement SEMICOLON .)
    VALUES          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    ALTER_B         reduce using rule 16 (statement -> case_statement SEMICOLON .)
    SIGNAL          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    END_SIGNAL      reduce using rule 16 (statement -> case_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 16 (statement -> case_statement SEMICOLON .)
    IS_TRUE         reduce using rule 16 (statement -> case_statement SEMICOLON .)
    CASE            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    UNTIL           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    REPEAT          reduce using rule 16 (statement -> case_statement SEMICOLON .)
    CALL            reduce using rule 16 (statement -> case_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 16 (statement -> case_statement SEMICOLON .)
    WRITE           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    BREAK           reduce using rule 16 (statement -> case_statement SEMICOLON .)
    RPAREN          reduce using rule 16 (statement -> case_statement SEMICOLON .)


state 56

    (17) statement -> while_statement SEMICOLON .

    NEW             reduce using rule 17 (statement -> while_statement SEMICOLON .)
    VALUES          reduce using rule 17 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> while_statement SEMICOLON .)
    ALTER_B         reduce using rule 17 (statement -> while_statement SEMICOLON .)
    SIGNAL          reduce using rule 17 (statement -> while_statement SEMICOLON .)
    END_SIGNAL      reduce using rule 17 (statement -> while_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 17 (statement -> while_statement SEMICOLON .)
    IS_TRUE         reduce using rule 17 (statement -> while_statement SEMICOLON .)
    CASE            reduce using rule 17 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> while_statement SEMICOLON .)
    UNTIL           reduce using rule 17 (statement -> while_statement SEMICOLON .)
    REPEAT          reduce using rule 17 (statement -> while_statement SEMICOLON .)
    CALL            reduce using rule 17 (statement -> while_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 17 (statement -> while_statement SEMICOLON .)
    WRITE           reduce using rule 17 (statement -> while_statement SEMICOLON .)
    BREAK           reduce using rule 17 (statement -> while_statement SEMICOLON .)
    RPAREN          reduce using rule 17 (statement -> while_statement SEMICOLON .)


state 57

    (18) statement -> until_statement SEMICOLON .

    NEW             reduce using rule 18 (statement -> until_statement SEMICOLON .)
    VALUES          reduce using rule 18 (statement -> until_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> until_statement SEMICOLON .)
    ALTER_B         reduce using rule 18 (statement -> until_statement SEMICOLON .)
    SIGNAL          reduce using rule 18 (statement -> until_statement SEMICOLON .)
    END_SIGNAL      reduce using rule 18 (statement -> until_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 18 (statement -> until_statement SEMICOLON .)
    IS_TRUE         reduce using rule 18 (statement -> until_statement SEMICOLON .)
    CASE            reduce using rule 18 (statement -> until_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> until_statement SEMICOLON .)
    UNTIL           reduce using rule 18 (statement -> until_statement SEMICOLON .)
    REPEAT          reduce using rule 18 (statement -> until_statement SEMICOLON .)
    CALL            reduce using rule 18 (statement -> until_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 18 (statement -> until_statement SEMICOLON .)
    WRITE           reduce using rule 18 (statement -> until_statement SEMICOLON .)
    BREAK           reduce using rule 18 (statement -> until_statement SEMICOLON .)
    RPAREN          reduce using rule 18 (statement -> until_statement SEMICOLON .)


state 58

    (19) statement -> repeat_statement SEMICOLON .

    NEW             reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    VALUES          reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    ALTER_B         reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    SIGNAL          reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    END_SIGNAL      reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    IS_TRUE         reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    CASE            reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    UNTIL           reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    REPEAT          reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    CALL            reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    WRITE           reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    BREAK           reduce using rule 19 (statement -> repeat_statement SEMICOLON .)
    RPAREN          reduce using rule 19 (statement -> repeat_statement SEMICOLON .)


state 59

    (20) statement -> procedure_call SEMICOLON .

    NEW             reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    VALUES          reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    ALTER           reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    ALTER_B         reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    SIGNAL          reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    END_SIGNAL      reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    IS_TRUE         reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    CASE            reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    UNTIL           reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    REPEAT          reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    CALL            reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    PRINT_VALUES    reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    WRITE           reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    BREAK           reduce using rule 20 (statement -> procedure_call SEMICOLON .)
    RPAREN          reduce using rule 20 (statement -> procedure_call SEMICOLON .)


state 60

    (21) statement -> print_statement SEMICOLON .

    NEW             reduce using rule 21 (statement -> print_statement SEMICOLON .)
    VALUES          reduce using rule 21 (statement -> print_statement SEMICOLON .)
    ALTER           reduce using rule 21 (statement -> print_statement SEMICOLON .)
    ALTER_B         reduce using rule 21 (statement -> print_statement SEMICOLON .)
    SIGNAL          reduce using rule 21 (statement -> print_statement SEMICOLON .)
    END_SIGNAL      reduce using rule 21 (statement -> print_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 21 (statement -> print_statement SEMICOLON .)
    IS_TRUE         reduce using rule 21 (statement -> print_statement SEMICOLON .)
    CASE            reduce using rule 21 (statement -> print_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> print_statement SEMICOLON .)
    UNTIL           reduce using rule 21 (statement -> print_statement SEMICOLON .)
    REPEAT          reduce using rule 21 (statement -> print_statement SEMICOLON .)
    CALL            reduce using rule 21 (statement -> print_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 21 (statement -> print_statement SEMICOLON .)
    WRITE           reduce using rule 21 (statement -> print_statement SEMICOLON .)
    BREAK           reduce using rule 21 (statement -> print_statement SEMICOLON .)
    RPAREN          reduce using rule 21 (statement -> print_statement SEMICOLON .)


state 61

    (22) statement -> write_statement SEMICOLON .

    NEW             reduce using rule 22 (statement -> write_statement SEMICOLON .)
    VALUES          reduce using rule 22 (statement -> write_statement SEMICOLON .)
    ALTER           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    ALTER_B         reduce using rule 22 (statement -> write_statement SEMICOLON .)
    SIGNAL          reduce using rule 22 (statement -> write_statement SEMICOLON .)
    END_SIGNAL      reduce using rule 22 (statement -> write_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 22 (statement -> write_statement SEMICOLON .)
    IS_TRUE         reduce using rule 22 (statement -> write_statement SEMICOLON .)
    CASE            reduce using rule 22 (statement -> write_statement SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    UNTIL           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    REPEAT          reduce using rule 22 (statement -> write_statement SEMICOLON .)
    CALL            reduce using rule 22 (statement -> write_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 22 (statement -> write_statement SEMICOLON .)
    WRITE           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    BREAK           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    RPAREN          reduce using rule 22 (statement -> write_statement SEMICOLON .)


state 62

    (23) statement -> break SEMICOLON .

    NEW             reduce using rule 23 (statement -> break SEMICOLON .)
    VALUES          reduce using rule 23 (statement -> break SEMICOLON .)
    ALTER           reduce using rule 23 (statement -> break SEMICOLON .)
    ALTER_B         reduce using rule 23 (statement -> break SEMICOLON .)
    SIGNAL          reduce using rule 23 (statement -> break SEMICOLON .)
    END_SIGNAL      reduce using rule 23 (statement -> break SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 23 (statement -> break SEMICOLON .)
    IS_TRUE         reduce using rule 23 (statement -> break SEMICOLON .)
    CASE            reduce using rule 23 (statement -> break SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> break SEMICOLON .)
    UNTIL           reduce using rule 23 (statement -> break SEMICOLON .)
    REPEAT          reduce using rule 23 (statement -> break SEMICOLON .)
    CALL            reduce using rule 23 (statement -> break SEMICOLON .)
    PRINT_VALUES    reduce using rule 23 (statement -> break SEMICOLON .)
    WRITE           reduce using rule 23 (statement -> break SEMICOLON .)
    BREAK           reduce using rule 23 (statement -> break SEMICOLON .)
    RPAREN          reduce using rule 23 (statement -> break SEMICOLON .)


state 63

    (25) variable_declaration -> NEW ID . COMMA type_value

    COMMA           shift and go to state 92


state 64

    (52) variable_update -> VALUES LPAREN . ID COMMA value RPAREN
    (54) variable_with_alter -> VALUES LPAREN . ID COMMA alter_variable RPAREN

    ID              shift and go to state 93


state 65

    (53) alter_variable -> ALTER LPAREN . ID COMMA operator COMMA value RPAREN

    ID              shift and go to state 94


state 66

    (55) alter_b_variable -> ALTER_B LPAREN . ID RPAREN

    ID              shift and go to state 95


state 67

    (56) signal_function -> SIGNAL LPAREN . position_state COMMA position_state RPAREN
    (57) position_state -> . value
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    position_state                 shift and go to state 96
    value                          shift and go to state 97
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 68

    (58) end_signal_function -> END_SIGNAL LPAREN . RPAREN

    RPAREN          shift and go to state 98


state 69

    (59) view_signal_function -> VIEW_SIGNAL LPAREN . position_state RPAREN
    (57) position_state -> . value
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    position_state                 shift and go to state 99
    value                          shift and go to state 97
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 70

    (60) is_true_function -> IS_TRUE LPAREN . ID RPAREN

    ID              shift and go to state 100


state 71

    (61) case_statement -> CASE ID . case_options
    (62) case_statement -> CASE ID . case_options else_option
    (63) case_options -> . when_statement
    (64) case_options -> . when_statement case_options
    (65) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    WHEN            shift and go to state 103

    case_options                   shift and go to state 101
    when_statement                 shift and go to state 102

state 72

    (67) while_statement -> WHILE condition . LPAREN statements RPAREN

    LPAREN          shift and go to state 104


state 73

    (40) math_operation_paren -> LPAREN . math_operation RPAREN
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 106
    NUMBER          shift and go to state 107
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    math_operation                 shift and go to state 105
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 74

    (68) condition -> value .

    LPAREN          reduce using rule 68 (condition -> value .)
    SEMICOLON       reduce using rule 68 (condition -> value .)


state 75

    (69) condition -> is_true_function .

    LPAREN          reduce using rule 69 (condition -> is_true_function .)
    SEMICOLON       reduce using rule 69 (condition -> is_true_function .)


state 76

    (30) value -> NUMBER .
    (42) math_value -> NUMBER .

    LPAREN          reduce using rule 30 (value -> NUMBER .)
    COMMA           reduce using rule 30 (value -> NUMBER .)
    RPAREN          reduce using rule 30 (value -> NUMBER .)
    THEN            reduce using rule 30 (value -> NUMBER .)
    SEMICOLON       reduce using rule 30 (value -> NUMBER .)
    ADD             reduce using rule 42 (math_value -> NUMBER .)
    SUB             reduce using rule 42 (math_value -> NUMBER .)
    MUL             reduce using rule 42 (math_value -> NUMBER .)
    DIV             reduce using rule 42 (math_value -> NUMBER .)
    REL_OP          reduce using rule 42 (math_value -> NUMBER .)


state 77

    (31) value -> BOOLEAN .

    LPAREN          reduce using rule 31 (value -> BOOLEAN .)
    COMMA           reduce using rule 31 (value -> BOOLEAN .)
    RPAREN          reduce using rule 31 (value -> BOOLEAN .)
    THEN            reduce using rule 31 (value -> BOOLEAN .)
    SEMICOLON       reduce using rule 31 (value -> BOOLEAN .)


state 78

    (32) value -> STRING .

    LPAREN          reduce using rule 32 (value -> STRING .)
    COMMA           reduce using rule 32 (value -> STRING .)
    RPAREN          reduce using rule 32 (value -> STRING .)
    THEN            reduce using rule 32 (value -> STRING .)
    SEMICOLON       reduce using rule 32 (value -> STRING .)


state 79

    (33) value -> ID .
    (41) math_value -> ID .

    LPAREN          reduce using rule 33 (value -> ID .)
    COMMA           reduce using rule 33 (value -> ID .)
    RPAREN          reduce using rule 33 (value -> ID .)
    THEN            reduce using rule 33 (value -> ID .)
    SEMICOLON       reduce using rule 33 (value -> ID .)
    ADD             reduce using rule 41 (math_value -> ID .)
    SUB             reduce using rule 41 (math_value -> ID .)
    MUL             reduce using rule 41 (math_value -> ID .)
    DIV             reduce using rule 41 (math_value -> ID .)
    REL_OP          reduce using rule 41 (math_value -> ID .)


state 80

    (34) value -> arith_op .

    LPAREN          reduce using rule 34 (value -> arith_op .)
    COMMA           reduce using rule 34 (value -> arith_op .)
    RPAREN          reduce using rule 34 (value -> arith_op .)
    THEN            reduce using rule 34 (value -> arith_op .)
    SEMICOLON       reduce using rule 34 (value -> arith_op .)


state 81

    (35) arith_op -> math_operation .
    (36) math_operation -> math_operation . operator math_operation
    (37) math_operation -> math_operation . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

    LPAREN          reduce using rule 35 (arith_op -> math_operation .)
    COMMA           reduce using rule 35 (arith_op -> math_operation .)
    RPAREN          reduce using rule 35 (arith_op -> math_operation .)
    THEN            reduce using rule 35 (arith_op -> math_operation .)
    SEMICOLON       reduce using rule 35 (arith_op -> math_operation .)
    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

    operator                       shift and go to state 108

state 82

    (38) math_operation -> math_value . operator math_operation
    (39) math_operation -> math_value . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

    operator                       shift and go to state 114

state 83

    (43) math_value -> math_value_negative .

    ADD             reduce using rule 43 (math_value -> math_value_negative .)
    SUB             reduce using rule 43 (math_value -> math_value_negative .)
    MUL             reduce using rule 43 (math_value -> math_value_negative .)
    DIV             reduce using rule 43 (math_value -> math_value_negative .)
    REL_OP          reduce using rule 43 (math_value -> math_value_negative .)
    LPAREN          reduce using rule 43 (math_value -> math_value_negative .)
    COMMA           reduce using rule 43 (math_value -> math_value_negative .)
    RPAREN          reduce using rule 43 (math_value -> math_value_negative .)
    THEN            reduce using rule 43 (math_value -> math_value_negative .)
    SEMICOLON       reduce using rule 43 (math_value -> math_value_negative .)


state 84

    (44) math_value -> math_operation_paren .

    ADD             reduce using rule 44 (math_value -> math_operation_paren .)
    SUB             reduce using rule 44 (math_value -> math_operation_paren .)
    MUL             reduce using rule 44 (math_value -> math_operation_paren .)
    DIV             reduce using rule 44 (math_value -> math_operation_paren .)
    REL_OP          reduce using rule 44 (math_value -> math_operation_paren .)
    LPAREN          reduce using rule 44 (math_value -> math_operation_paren .)
    COMMA           reduce using rule 44 (math_value -> math_operation_paren .)
    RPAREN          reduce using rule 44 (math_value -> math_operation_paren .)
    THEN            reduce using rule 44 (math_value -> math_operation_paren .)
    SEMICOLON       reduce using rule 44 (math_value -> math_operation_paren .)


state 85

    (45) math_value_negative -> SUB . ID
    (46) math_value_negative -> SUB . NUMBER

    ID              shift and go to state 115
    NUMBER          shift and go to state 116


state 86

    (70) until_statement -> UNTIL LPAREN . statements RPAREN condition
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43
    RPAREN          reduce using rule 81 (empty -> .)

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 117
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 87

    (71) repeat_statement -> REPEAT LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43
    RPAREN          reduce using rule 81 (empty -> .)

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 118
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 88

    (72) procedure_call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 119


state 89

    (73) print_statement -> PRINT_VALUES LPAREN . print_value_list RPAREN
    (74) print_value_list -> . print_value
    (75) print_value_list -> . print_value COMMA print_value_list
    (76) print_value -> . value
    (77) print_value -> . is_true_function
    (78) print_value -> . view_signal_function
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    IS_TRUE         shift and go to state 35
    VIEW_SIGNAL     shift and go to state 34
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    print_value_list               shift and go to state 120
    print_value                    shift and go to state 121
    value                          shift and go to state 122
    is_true_function               shift and go to state 123
    view_signal_function           shift and go to state 124
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 90

    (79) write_statement -> WRITE LPAREN . print_value_list RPAREN
    (74) print_value_list -> . print_value
    (75) print_value_list -> . print_value COMMA print_value_list
    (76) print_value -> . value
    (77) print_value -> . is_true_function
    (78) print_value -> . view_signal_function
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    IS_TRUE         shift and go to state 35
    VIEW_SIGNAL     shift and go to state 34
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    print_value_list               shift and go to state 125
    print_value                    shift and go to state 121
    value                          shift and go to state 122
    is_true_function               shift and go to state 123
    view_signal_function           shift and go to state 124
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 91

    (4) procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .

    PROC            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)
    $end            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)


state 92

    (25) variable_declaration -> NEW ID COMMA . type_value
    (26) type_value -> . LPAREN type COMMA value RPAREN

    LPAREN          shift and go to state 127

    type_value                     shift and go to state 126

state 93

    (52) variable_update -> VALUES LPAREN ID . COMMA value RPAREN
    (54) variable_with_alter -> VALUES LPAREN ID . COMMA alter_variable RPAREN

    COMMA           shift and go to state 128


state 94

    (53) alter_variable -> ALTER LPAREN ID . COMMA operator COMMA value RPAREN

    COMMA           shift and go to state 129


state 95

    (55) alter_b_variable -> ALTER_B LPAREN ID . RPAREN

    RPAREN          shift and go to state 130


state 96

    (56) signal_function -> SIGNAL LPAREN position_state . COMMA position_state RPAREN

    COMMA           shift and go to state 131


state 97

    (57) position_state -> value .

    COMMA           reduce using rule 57 (position_state -> value .)
    RPAREN          reduce using rule 57 (position_state -> value .)


state 98

    (58) end_signal_function -> END_SIGNAL LPAREN RPAREN .

    SEMICOLON       reduce using rule 58 (end_signal_function -> END_SIGNAL LPAREN RPAREN .)


state 99

    (59) view_signal_function -> VIEW_SIGNAL LPAREN position_state . RPAREN

    RPAREN          shift and go to state 132


state 100

    (60) is_true_function -> IS_TRUE LPAREN ID . RPAREN

    RPAREN          shift and go to state 133


state 101

    (61) case_statement -> CASE ID case_options .
    (62) case_statement -> CASE ID case_options . else_option
    (66) else_option -> . ELSE LPAREN statements RPAREN

    SEMICOLON       reduce using rule 61 (case_statement -> CASE ID case_options .)
    ELSE            shift and go to state 135

    else_option                    shift and go to state 134

state 102

    (63) case_options -> when_statement .
    (64) case_options -> when_statement . case_options
    (63) case_options -> . when_statement
    (64) case_options -> . when_statement case_options
    (65) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    ELSE            reduce using rule 63 (case_options -> when_statement .)
    SEMICOLON       reduce using rule 63 (case_options -> when_statement .)
    WHEN            shift and go to state 103

    when_statement                 shift and go to state 102
    case_options                   shift and go to state 136

state 103

    (65) when_statement -> WHEN . value THEN LPAREN statements RPAREN
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    value                          shift and go to state 137
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 104

    (67) while_statement -> WHILE condition LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43
    RPAREN          reduce using rule 81 (empty -> .)

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 138
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 105

    (40) math_operation_paren -> LPAREN math_operation . RPAREN
    (36) math_operation -> math_operation . operator math_operation
    (37) math_operation -> math_operation . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

    RPAREN          shift and go to state 139
    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

    operator                       shift and go to state 108

state 106

    (41) math_value -> ID .

    ADD             reduce using rule 41 (math_value -> ID .)
    SUB             reduce using rule 41 (math_value -> ID .)
    MUL             reduce using rule 41 (math_value -> ID .)
    DIV             reduce using rule 41 (math_value -> ID .)
    REL_OP          reduce using rule 41 (math_value -> ID .)
    LPAREN          reduce using rule 41 (math_value -> ID .)
    COMMA           reduce using rule 41 (math_value -> ID .)
    RPAREN          reduce using rule 41 (math_value -> ID .)
    THEN            reduce using rule 41 (math_value -> ID .)
    SEMICOLON       reduce using rule 41 (math_value -> ID .)


state 107

    (42) math_value -> NUMBER .

    ADD             reduce using rule 42 (math_value -> NUMBER .)
    SUB             reduce using rule 42 (math_value -> NUMBER .)
    MUL             reduce using rule 42 (math_value -> NUMBER .)
    DIV             reduce using rule 42 (math_value -> NUMBER .)
    REL_OP          reduce using rule 42 (math_value -> NUMBER .)
    LPAREN          reduce using rule 42 (math_value -> NUMBER .)
    COMMA           reduce using rule 42 (math_value -> NUMBER .)
    RPAREN          reduce using rule 42 (math_value -> NUMBER .)
    THEN            reduce using rule 42 (math_value -> NUMBER .)
    SEMICOLON       reduce using rule 42 (math_value -> NUMBER .)


state 108

    (36) math_operation -> math_operation operator . math_operation
    (37) math_operation -> math_operation operator . math_value
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 106
    NUMBER          shift and go to state 107
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    math_operation                 shift and go to state 140
    math_value                     shift and go to state 141
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 109

    (47) operator -> ADD .

    ID              reduce using rule 47 (operator -> ADD .)
    NUMBER          reduce using rule 47 (operator -> ADD .)
    SUB             reduce using rule 47 (operator -> ADD .)
    LPAREN          reduce using rule 47 (operator -> ADD .)
    COMMA           reduce using rule 47 (operator -> ADD .)


state 110

    (48) operator -> SUB .

    ID              reduce using rule 48 (operator -> SUB .)
    NUMBER          reduce using rule 48 (operator -> SUB .)
    SUB             reduce using rule 48 (operator -> SUB .)
    LPAREN          reduce using rule 48 (operator -> SUB .)
    COMMA           reduce using rule 48 (operator -> SUB .)


state 111

    (49) operator -> MUL .

    ID              reduce using rule 49 (operator -> MUL .)
    NUMBER          reduce using rule 49 (operator -> MUL .)
    SUB             reduce using rule 49 (operator -> MUL .)
    LPAREN          reduce using rule 49 (operator -> MUL .)
    COMMA           reduce using rule 49 (operator -> MUL .)


state 112

    (50) operator -> DIV .

    ID              reduce using rule 50 (operator -> DIV .)
    NUMBER          reduce using rule 50 (operator -> DIV .)
    SUB             reduce using rule 50 (operator -> DIV .)
    LPAREN          reduce using rule 50 (operator -> DIV .)
    COMMA           reduce using rule 50 (operator -> DIV .)


state 113

    (51) operator -> REL_OP .

    ID              reduce using rule 51 (operator -> REL_OP .)
    NUMBER          reduce using rule 51 (operator -> REL_OP .)
    SUB             reduce using rule 51 (operator -> REL_OP .)
    LPAREN          reduce using rule 51 (operator -> REL_OP .)
    COMMA           reduce using rule 51 (operator -> REL_OP .)


state 114

    (38) math_operation -> math_value operator . math_operation
    (39) math_operation -> math_value operator . math_value
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 106
    NUMBER          shift and go to state 107
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    math_value                     shift and go to state 142
    math_operation                 shift and go to state 143
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 115

    (45) math_value_negative -> SUB ID .

    ADD             reduce using rule 45 (math_value_negative -> SUB ID .)
    SUB             reduce using rule 45 (math_value_negative -> SUB ID .)
    MUL             reduce using rule 45 (math_value_negative -> SUB ID .)
    DIV             reduce using rule 45 (math_value_negative -> SUB ID .)
    REL_OP          reduce using rule 45 (math_value_negative -> SUB ID .)
    LPAREN          reduce using rule 45 (math_value_negative -> SUB ID .)
    COMMA           reduce using rule 45 (math_value_negative -> SUB ID .)
    RPAREN          reduce using rule 45 (math_value_negative -> SUB ID .)
    THEN            reduce using rule 45 (math_value_negative -> SUB ID .)
    SEMICOLON       reduce using rule 45 (math_value_negative -> SUB ID .)


state 116

    (46) math_value_negative -> SUB NUMBER .

    ADD             reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    SUB             reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    MUL             reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    DIV             reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    REL_OP          reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    LPAREN          reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    COMMA           reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    RPAREN          reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    THEN            reduce using rule 46 (math_value_negative -> SUB NUMBER .)
    SEMICOLON       reduce using rule 46 (math_value_negative -> SUB NUMBER .)


state 117

    (70) until_statement -> UNTIL LPAREN statements . RPAREN condition

    RPAREN          shift and go to state 144


state 118

    (71) repeat_statement -> REPEAT LPAREN statements . RPAREN

    RPAREN          shift and go to state 145


state 119

    (72) procedure_call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 146


state 120

    (73) print_statement -> PRINT_VALUES LPAREN print_value_list . RPAREN

    RPAREN          shift and go to state 147


state 121

    (74) print_value_list -> print_value .
    (75) print_value_list -> print_value . COMMA print_value_list

    RPAREN          reduce using rule 74 (print_value_list -> print_value .)
    COMMA           shift and go to state 148


state 122

    (76) print_value -> value .

    COMMA           reduce using rule 76 (print_value -> value .)
    RPAREN          reduce using rule 76 (print_value -> value .)


state 123

    (77) print_value -> is_true_function .

    COMMA           reduce using rule 77 (print_value -> is_true_function .)
    RPAREN          reduce using rule 77 (print_value -> is_true_function .)


state 124

    (78) print_value -> view_signal_function .

    COMMA           reduce using rule 78 (print_value -> view_signal_function .)
    RPAREN          reduce using rule 78 (print_value -> view_signal_function .)


state 125

    (79) write_statement -> WRITE LPAREN print_value_list . RPAREN

    RPAREN          shift and go to state 149


state 126

    (25) variable_declaration -> NEW ID COMMA type_value .

    SEMICOLON       reduce using rule 25 (variable_declaration -> NEW ID COMMA type_value .)


state 127

    (26) type_value -> LPAREN . type COMMA value RPAREN
    (27) type -> . NUM
    (28) type -> . BOOL
    (29) type -> . STRING

    NUM             shift and go to state 151
    BOOL            shift and go to state 152
    STRING          shift and go to state 153

    type                           shift and go to state 150

state 128

    (52) variable_update -> VALUES LPAREN ID COMMA . value RPAREN
    (54) variable_with_alter -> VALUES LPAREN ID COMMA . alter_variable RPAREN
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    ALTER           shift and go to state 30
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    value                          shift and go to state 154
    alter_variable                 shift and go to state 155
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 129

    (53) alter_variable -> ALTER LPAREN ID COMMA . operator COMMA value RPAREN
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

    operator                       shift and go to state 156

state 130

    (55) alter_b_variable -> ALTER_B LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 55 (alter_b_variable -> ALTER_B LPAREN ID RPAREN .)


state 131

    (56) signal_function -> SIGNAL LPAREN position_state COMMA . position_state RPAREN
    (57) position_state -> . value
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    position_state                 shift and go to state 157
    value                          shift and go to state 97
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 132

    (59) view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .

    SEMICOLON       reduce using rule 59 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    COMMA           reduce using rule 59 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    RPAREN          reduce using rule 59 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)


state 133

    (60) is_true_function -> IS_TRUE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 60 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    LPAREN          reduce using rule 60 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    COMMA           reduce using rule 60 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 60 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)


state 134

    (62) case_statement -> CASE ID case_options else_option .

    SEMICOLON       reduce using rule 62 (case_statement -> CASE ID case_options else_option .)


state 135

    (66) else_option -> ELSE . LPAREN statements RPAREN

    LPAREN          shift and go to state 158


state 136

    (64) case_options -> when_statement case_options .

    ELSE            reduce using rule 64 (case_options -> when_statement case_options .)
    SEMICOLON       reduce using rule 64 (case_options -> when_statement case_options .)


state 137

    (65) when_statement -> WHEN value . THEN LPAREN statements RPAREN

    THEN            shift and go to state 159


state 138

    (67) while_statement -> WHILE condition LPAREN statements . RPAREN

    RPAREN          shift and go to state 160


state 139

    (40) math_operation_paren -> LPAREN math_operation RPAREN .

    ADD             reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SUB             reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    MUL             reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    DIV             reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    REL_OP          reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    LPAREN          reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    COMMA           reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    RPAREN          reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    THEN            reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SEMICOLON       reduce using rule 40 (math_operation_paren -> LPAREN math_operation RPAREN .)


state 140

    (36) math_operation -> math_operation operator math_operation .
    (36) math_operation -> math_operation . operator math_operation
    (37) math_operation -> math_operation . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 36 (math_operation -> math_operation operator math_operation .)
    COMMA           reduce using rule 36 (math_operation -> math_operation operator math_operation .)
    RPAREN          reduce using rule 36 (math_operation -> math_operation operator math_operation .)
    THEN            reduce using rule 36 (math_operation -> math_operation operator math_operation .)
    SEMICOLON       reduce using rule 36 (math_operation -> math_operation operator math_operation .)
    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

  ! ADD             [ reduce using rule 36 (math_operation -> math_operation operator math_operation .) ]
  ! SUB             [ reduce using rule 36 (math_operation -> math_operation operator math_operation .) ]
  ! MUL             [ reduce using rule 36 (math_operation -> math_operation operator math_operation .) ]
  ! DIV             [ reduce using rule 36 (math_operation -> math_operation operator math_operation .) ]
  ! REL_OP          [ reduce using rule 36 (math_operation -> math_operation operator math_operation .) ]

    operator                       shift and go to state 108

state 141

    (37) math_operation -> math_operation operator math_value .
    (38) math_operation -> math_value . operator math_operation
    (39) math_operation -> math_value . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 37 (math_operation -> math_operation operator math_value .)
    COMMA           reduce using rule 37 (math_operation -> math_operation operator math_value .)
    RPAREN          reduce using rule 37 (math_operation -> math_operation operator math_value .)
    THEN            reduce using rule 37 (math_operation -> math_operation operator math_value .)
    SEMICOLON       reduce using rule 37 (math_operation -> math_operation operator math_value .)
    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

  ! ADD             [ reduce using rule 37 (math_operation -> math_operation operator math_value .) ]
  ! SUB             [ reduce using rule 37 (math_operation -> math_operation operator math_value .) ]
  ! MUL             [ reduce using rule 37 (math_operation -> math_operation operator math_value .) ]
  ! DIV             [ reduce using rule 37 (math_operation -> math_operation operator math_value .) ]
  ! REL_OP          [ reduce using rule 37 (math_operation -> math_operation operator math_value .) ]

    operator                       shift and go to state 114

state 142

    (39) math_operation -> math_value operator math_value .
    (38) math_operation -> math_value . operator math_operation
    (39) math_operation -> math_value . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 39 (math_operation -> math_value operator math_value .)
    COMMA           reduce using rule 39 (math_operation -> math_value operator math_value .)
    RPAREN          reduce using rule 39 (math_operation -> math_value operator math_value .)
    THEN            reduce using rule 39 (math_operation -> math_value operator math_value .)
    SEMICOLON       reduce using rule 39 (math_operation -> math_value operator math_value .)
    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

  ! ADD             [ reduce using rule 39 (math_operation -> math_value operator math_value .) ]
  ! SUB             [ reduce using rule 39 (math_operation -> math_value operator math_value .) ]
  ! MUL             [ reduce using rule 39 (math_operation -> math_value operator math_value .) ]
  ! DIV             [ reduce using rule 39 (math_operation -> math_value operator math_value .) ]
  ! REL_OP          [ reduce using rule 39 (math_operation -> math_value operator math_value .) ]

    operator                       shift and go to state 114

state 143

    (38) math_operation -> math_value operator math_operation .
    (36) math_operation -> math_operation . operator math_operation
    (37) math_operation -> math_operation . operator math_value
    (47) operator -> . ADD
    (48) operator -> . SUB
    (49) operator -> . MUL
    (50) operator -> . DIV
    (51) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 38 (math_operation -> math_value operator math_operation .)
    COMMA           reduce using rule 38 (math_operation -> math_value operator math_operation .)
    RPAREN          reduce using rule 38 (math_operation -> math_value operator math_operation .)
    THEN            reduce using rule 38 (math_operation -> math_value operator math_operation .)
    SEMICOLON       reduce using rule 38 (math_operation -> math_value operator math_operation .)
    ADD             shift and go to state 109
    SUB             shift and go to state 110
    MUL             shift and go to state 111
    DIV             shift and go to state 112
    REL_OP          shift and go to state 113

  ! ADD             [ reduce using rule 38 (math_operation -> math_value operator math_operation .) ]
  ! SUB             [ reduce using rule 38 (math_operation -> math_value operator math_operation .) ]
  ! MUL             [ reduce using rule 38 (math_operation -> math_value operator math_operation .) ]
  ! DIV             [ reduce using rule 38 (math_operation -> math_value operator math_operation .) ]
  ! REL_OP          [ reduce using rule 38 (math_operation -> math_value operator math_operation .) ]

    operator                       shift and go to state 108

state 144

    (70) until_statement -> UNTIL LPAREN statements RPAREN . condition
    (68) condition -> . value
    (69) condition -> . is_true_function
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    IS_TRUE         shift and go to state 35
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    condition                      shift and go to state 161
    value                          shift and go to state 74
    is_true_function               shift and go to state 75
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 145

    (71) repeat_statement -> REPEAT LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 71 (repeat_statement -> REPEAT LPAREN statements RPAREN .)


state 146

    (72) procedure_call -> CALL LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 72 (procedure_call -> CALL LPAREN ID RPAREN .)


state 147

    (73) print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .

    SEMICOLON       reduce using rule 73 (print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .)


state 148

    (75) print_value_list -> print_value COMMA . print_value_list
    (74) print_value_list -> . print_value
    (75) print_value_list -> . print_value COMMA print_value_list
    (76) print_value -> . value
    (77) print_value -> . is_true_function
    (78) print_value -> . view_signal_function
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    IS_TRUE         shift and go to state 35
    VIEW_SIGNAL     shift and go to state 34
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    print_value                    shift and go to state 121
    print_value_list               shift and go to state 162
    value                          shift and go to state 122
    is_true_function               shift and go to state 123
    view_signal_function           shift and go to state 124
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 149

    (79) write_statement -> WRITE LPAREN print_value_list RPAREN .

    SEMICOLON       reduce using rule 79 (write_statement -> WRITE LPAREN print_value_list RPAREN .)


state 150

    (26) type_value -> LPAREN type . COMMA value RPAREN

    COMMA           shift and go to state 163


state 151

    (27) type -> NUM .

    COMMA           reduce using rule 27 (type -> NUM .)


state 152

    (28) type -> BOOL .

    COMMA           reduce using rule 28 (type -> BOOL .)


state 153

    (29) type -> STRING .

    COMMA           reduce using rule 29 (type -> STRING .)


state 154

    (52) variable_update -> VALUES LPAREN ID COMMA value . RPAREN

    RPAREN          shift and go to state 164


state 155

    (54) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable . RPAREN

    RPAREN          shift and go to state 165


state 156

    (53) alter_variable -> ALTER LPAREN ID COMMA operator . COMMA value RPAREN

    COMMA           shift and go to state 166


state 157

    (56) signal_function -> SIGNAL LPAREN position_state COMMA position_state . RPAREN

    RPAREN          shift and go to state 167


state 158

    (66) else_option -> ELSE LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43
    RPAREN          reduce using rule 81 (empty -> .)

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 168
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 159

    (65) when_statement -> WHEN value THEN . LPAREN statements RPAREN

    LPAREN          shift and go to state 169


state 160

    (67) while_statement -> WHILE condition LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 67 (while_statement -> WHILE condition LPAREN statements RPAREN .)


state 161

    (70) until_statement -> UNTIL LPAREN statements RPAREN condition .

    SEMICOLON       reduce using rule 70 (until_statement -> UNTIL LPAREN statements RPAREN condition .)


state 162

    (75) print_value_list -> print_value COMMA print_value_list .

    RPAREN          reduce using rule 75 (print_value_list -> print_value COMMA print_value_list .)


state 163

    (26) type_value -> LPAREN type COMMA . value RPAREN
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    value                          shift and go to state 170
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 164

    (52) variable_update -> VALUES LPAREN ID COMMA value RPAREN .

    SEMICOLON       reduce using rule 52 (variable_update -> VALUES LPAREN ID COMMA value RPAREN .)


state 165

    (54) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .

    SEMICOLON       reduce using rule 54 (variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .)


state 166

    (53) alter_variable -> ALTER LPAREN ID COMMA operator COMMA . value RPAREN
    (30) value -> . NUMBER
    (31) value -> . BOOLEAN
    (32) value -> . STRING
    (33) value -> . ID
    (34) value -> . arith_op
    (35) arith_op -> . math_operation
    (36) math_operation -> . math_operation operator math_operation
    (37) math_operation -> . math_operation operator math_value
    (38) math_operation -> . math_value operator math_operation
    (39) math_operation -> . math_value operator math_value
    (41) math_value -> . ID
    (42) math_value -> . NUMBER
    (43) math_value -> . math_value_negative
    (44) math_value -> . math_operation_paren
    (45) math_value_negative -> . SUB ID
    (46) math_value_negative -> . SUB NUMBER
    (40) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 76
    BOOLEAN         shift and go to state 77
    STRING          shift and go to state 78
    ID              shift and go to state 79
    SUB             shift and go to state 85
    LPAREN          shift and go to state 73

    value                          shift and go to state 171
    arith_op                       shift and go to state 80
    math_operation                 shift and go to state 81
    math_value                     shift and go to state 82
    math_value_negative            shift and go to state 83
    math_operation_paren           shift and go to state 84

state 167

    (56) signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .

    SEMICOLON       reduce using rule 56 (signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .)


state 168

    (66) else_option -> ELSE LPAREN statements . RPAREN

    RPAREN          shift and go to state 172


state 169

    (65) when_statement -> WHEN value THEN LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . end_signal_function SEMICOLON
    (14) statement -> . view_signal_function SEMICOLON
    (15) statement -> . is_true_function SEMICOLON
    (16) statement -> . case_statement SEMICOLON
    (17) statement -> . while_statement SEMICOLON
    (18) statement -> . until_statement SEMICOLON
    (19) statement -> . repeat_statement SEMICOLON
    (20) statement -> . procedure_call SEMICOLON
    (21) statement -> . print_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . break SEMICOLON
    (24) statement -> . empty
    (25) variable_declaration -> . NEW ID COMMA type_value
    (52) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (53) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (54) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (55) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (56) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (58) end_signal_function -> . END_SIGNAL LPAREN RPAREN
    (59) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (60) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (61) case_statement -> . CASE ID case_options
    (62) case_statement -> . CASE ID case_options else_option
    (67) while_statement -> . WHILE condition LPAREN statements RPAREN
    (70) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (71) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (72) procedure_call -> . CALL LPAREN ID RPAREN
    (73) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (79) write_statement -> . WRITE LPAREN print_value_list RPAREN
    (80) break -> . BREAK
    (81) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for END_SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 28
    VALUES          shift and go to state 29
    ALTER           shift and go to state 30
    ALTER_B         shift and go to state 31
    SIGNAL          shift and go to state 32
    END_SIGNAL      shift and go to state 33
    VIEW_SIGNAL     shift and go to state 34
    IS_TRUE         shift and go to state 35
    CASE            shift and go to state 36
    WHILE           shift and go to state 37
    UNTIL           shift and go to state 38
    REPEAT          shift and go to state 39
    CALL            shift and go to state 40
    PRINT_VALUES    shift and go to state 41
    WRITE           shift and go to state 42
    BREAK           shift and go to state 43
    RPAREN          reduce using rule 81 (empty -> .)

  ! NEW             [ reduce using rule 81 (empty -> .) ]
  ! VALUES          [ reduce using rule 81 (empty -> .) ]
  ! ALTER           [ reduce using rule 81 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 81 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 81 (empty -> .) ]
  ! END_SIGNAL      [ reduce using rule 81 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 81 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! UNTIL           [ reduce using rule 81 (empty -> .) ]
  ! REPEAT          [ reduce using rule 81 (empty -> .) ]
  ! CALL            [ reduce using rule 81 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 81 (empty -> .) ]
  ! WRITE           [ reduce using rule 81 (empty -> .) ]
  ! BREAK           [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 173
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    end_signal_function            shift and go to state 16
    view_signal_function           shift and go to state 17
    is_true_function               shift and go to state 18
    case_statement                 shift and go to state 19
    while_statement                shift and go to state 20
    until_statement                shift and go to state 21
    repeat_statement               shift and go to state 22
    procedure_call                 shift and go to state 23
    print_statement                shift and go to state 24
    write_statement                shift and go to state 25
    break                          shift and go to state 26
    empty                          shift and go to state 27

state 170

    (26) type_value -> LPAREN type COMMA value . RPAREN

    RPAREN          shift and go to state 174


state 171

    (53) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value . RPAREN

    RPAREN          shift and go to state 175


state 172

    (66) else_option -> ELSE LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 66 (else_option -> ELSE LPAREN statements RPAREN .)


state 173

    (65) when_statement -> WHEN value THEN LPAREN statements . RPAREN

    RPAREN          shift and go to state 176


state 174

    (26) type_value -> LPAREN type COMMA value RPAREN .

    SEMICOLON       reduce using rule 26 (type_value -> LPAREN type COMMA value RPAREN .)


state 175

    (53) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .

    SEMICOLON       reduce using rule 53 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)
    RPAREN          reduce using rule 53 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)


state 176

    (65) when_statement -> WHEN value THEN LPAREN statements RPAREN .

    WHEN            reduce using rule 65 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    ELSE            reduce using rule 65 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    SEMICOLON       reduce using rule 65 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEW in state 7 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 7 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 7 resolved as shift
WARNING: shift/reduce conflict for CASE in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 7 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 7 resolved as shift
WARNING: shift/reduce conflict for CALL in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 7 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 7 resolved as shift
WARNING: shift/reduce conflict for NEW in state 9 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 9 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 9 resolved as shift
WARNING: shift/reduce conflict for CASE in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for CALL in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 9 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 9 resolved as shift
WARNING: shift/reduce conflict for NEW in state 86 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 86 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 86 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 86 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 86 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 86 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 86 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 86 resolved as shift
WARNING: shift/reduce conflict for CASE in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 86 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 86 resolved as shift
WARNING: shift/reduce conflict for CALL in state 86 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 86 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 86 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 86 resolved as shift
WARNING: shift/reduce conflict for NEW in state 87 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 87 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 87 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 87 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 87 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 87 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 87 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 87 resolved as shift
WARNING: shift/reduce conflict for CASE in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 87 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 87 resolved as shift
WARNING: shift/reduce conflict for CALL in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 87 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 87 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 87 resolved as shift
WARNING: shift/reduce conflict for NEW in state 104 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 104 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 104 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 104 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 104 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 104 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 104 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 104 resolved as shift
WARNING: shift/reduce conflict for CASE in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 104 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 104 resolved as shift
WARNING: shift/reduce conflict for CALL in state 104 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 104 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 104 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 104 resolved as shift
WARNING: shift/reduce conflict for ADD in state 140 resolved as shift
WARNING: shift/reduce conflict for SUB in state 140 resolved as shift
WARNING: shift/reduce conflict for MUL in state 140 resolved as shift
WARNING: shift/reduce conflict for DIV in state 140 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 140 resolved as shift
WARNING: shift/reduce conflict for ADD in state 141 resolved as shift
WARNING: shift/reduce conflict for SUB in state 141 resolved as shift
WARNING: shift/reduce conflict for MUL in state 141 resolved as shift
WARNING: shift/reduce conflict for DIV in state 141 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 141 resolved as shift
WARNING: shift/reduce conflict for ADD in state 142 resolved as shift
WARNING: shift/reduce conflict for SUB in state 142 resolved as shift
WARNING: shift/reduce conflict for MUL in state 142 resolved as shift
WARNING: shift/reduce conflict for DIV in state 142 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 142 resolved as shift
WARNING: shift/reduce conflict for ADD in state 143 resolved as shift
WARNING: shift/reduce conflict for SUB in state 143 resolved as shift
WARNING: shift/reduce conflict for MUL in state 143 resolved as shift
WARNING: shift/reduce conflict for DIV in state 143 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 143 resolved as shift
WARNING: shift/reduce conflict for NEW in state 158 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 158 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 158 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 158 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 158 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 158 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 158 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 158 resolved as shift
WARNING: shift/reduce conflict for CASE in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 158 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 158 resolved as shift
WARNING: shift/reduce conflict for CALL in state 158 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 158 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 158 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 158 resolved as shift
WARNING: shift/reduce conflict for NEW in state 169 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 169 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 169 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 169 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 169 resolved as shift
WARNING: shift/reduce conflict for END_SIGNAL in state 169 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 169 resolved as shift
WARNING: shift/reduce conflict for CASE in state 169 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 169 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 169 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 169 resolved as shift
WARNING: shift/reduce conflict for CALL in state 169 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 169 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 169 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 169 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 9
