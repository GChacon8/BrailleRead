Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> procedure_set
Rule 2     procedure_set -> procedure procedure_set
Rule 3     procedure_set -> procedure
Rule 4     procedure -> PROC ID LPAREN statements RPAREN SEMICOLON
Rule 5     statements -> statement
Rule 6     statements -> statement statements
Rule 7     statement -> variable_declaration SEMICOLON
Rule 8     statement -> variable_update SEMICOLON
Rule 9     statement -> alter_variable SEMICOLON
Rule 10    statement -> variable_with_alter SEMICOLON
Rule 11    statement -> alter_b_variable SEMICOLON
Rule 12    statement -> signal_function SEMICOLON
Rule 13    statement -> view_signal_function SEMICOLON
Rule 14    statement -> is_true_function SEMICOLON
Rule 15    statement -> case_statement SEMICOLON
Rule 16    statement -> while_statement SEMICOLON
Rule 17    statement -> until_statement SEMICOLON
Rule 18    statement -> repeat_statement SEMICOLON
Rule 19    statement -> procedure_call SEMICOLON
Rule 20    statement -> print_statement SEMICOLON
Rule 21    statement -> break SEMICOLON
Rule 22    statement -> empty
Rule 23    variable_declaration -> NEW ID COMMA type_value
Rule 24    type_value -> LPAREN type COMMA value RPAREN
Rule 25    type -> NUM
Rule 26    type -> BOOL
Rule 27    type -> STRING
Rule 28    value -> NUMBER
Rule 29    value -> BOOLEAN
Rule 30    value -> STRING
Rule 31    value -> ID
Rule 32    value -> arith_op
Rule 33    arith_op -> math_operation
Rule 34    math_operation -> math_operation operator math_operation
Rule 35    math_operation -> math_operation operator math_value
Rule 36    math_operation -> math_value operator math_operation
Rule 37    math_operation -> math_value operator math_value
Rule 38    math_operation_paren -> LPAREN math_operation RPAREN
Rule 39    math_value -> ID
Rule 40    math_value -> NUMBER
Rule 41    math_value -> math_value_negative
Rule 42    math_value -> math_operation_paren
Rule 43    math_value_negative -> SUB ID
Rule 44    math_value_negative -> SUB NUMBER
Rule 45    operator -> ADD
Rule 46    operator -> SUB
Rule 47    operator -> MUL
Rule 48    operator -> DIV
Rule 49    operator -> REL_OP
Rule 50    variable_update -> VALUES LPAREN ID COMMA value RPAREN
Rule 51    alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN
Rule 52    variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN
Rule 53    alter_b_variable -> ALTER_B LPAREN ID RPAREN
Rule 54    signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN
Rule 55    position_state -> value
Rule 56    view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN
Rule 57    is_true_function -> IS_TRUE LPAREN ID RPAREN
Rule 58    case_statement -> CASE ID case_options
Rule 59    case_statement -> CASE ID case_options else_option
Rule 60    case_options -> when_statement
Rule 61    case_options -> when_statement case_options
Rule 62    when_statement -> WHEN value THEN LPAREN statements RPAREN
Rule 63    else_option -> ELSE LPAREN statements RPAREN
Rule 64    while_statement -> WHILE condition LPAREN statements RPAREN
Rule 65    condition -> value
Rule 66    condition -> is_true_function
Rule 67    until_statement -> UNTIL LPAREN statements RPAREN condition
Rule 68    repeat_statement -> REPEAT LPAREN statements RPAREN
Rule 69    procedure_call -> CALL LPAREN ID RPAREN
Rule 70    print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN
Rule 71    print_value_list -> print_value
Rule 72    print_value_list -> print_value COMMA print_value_list
Rule 73    print_value -> value
Rule 74    print_value -> is_true_function
Rule 75    print_value -> view_signal_function
Rule 76    break -> BREAK
Rule 77    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 45
ALTER                : 51
ALTER_B              : 53
BOOL                 : 26
BOOLEAN              : 29
BREAK                : 76
CALL                 : 69
CASE                 : 58 59
COMMA                : 23 24 50 51 51 52 54 72
DIV                  : 48
ELSE                 : 63
ID                   : 4 23 31 39 43 50 51 52 53 57 58 59 69
IS_TRUE              : 57
LPAREN               : 4 24 38 50 51 52 53 54 56 57 62 63 64 67 68 69 70
MUL                  : 47
NEW                  : 23
NUM                  : 25
NUMBER               : 28 40 44
PRINT_VALUES         : 70
PROC                 : 4
REL_OP               : 49
REPEAT               : 68
RPAREN               : 4 24 38 50 51 52 53 54 56 57 62 63 64 67 68 69 70
SEMICOLON            : 4 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
SIGNAL               : 54
STRING               : 27 30
SUB                  : 43 44 46
THEN                 : 62
UNTIL                : 67
VALUES               : 50 52
VIEW_SIGNAL          : 56
WHEN                 : 62
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

alter_b_variable     : 11
alter_variable       : 9 52
arith_op             : 32
break                : 21
case_options         : 58 59 61
case_statement       : 15
condition            : 64 67
else_option          : 59
empty                : 22
is_true_function     : 14 66 74
math_operation       : 33 34 34 35 36 38
math_operation_paren : 42
math_value           : 35 36 37 37
math_value_negative  : 41
operator             : 34 35 36 37 51
position_state       : 54 54 56
print_statement      : 20
print_value          : 71 72
print_value_list     : 70 72
procedure            : 2 3
procedure_call       : 19
procedure_set        : 1 2
program              : 0
repeat_statement     : 18
signal_function      : 12
statement            : 5 6
statements           : 4 6 62 63 64 67 68
type                 : 24
type_value           : 23
until_statement      : 17
value                : 24 50 51 55 62 65 73
variable_declaration : 7
variable_update      : 8
variable_with_alter  : 10
view_signal_function : 13 75
when_statement       : 60 61
while_statement      : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . procedure_set
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    PROC            shift and go to state 4

    program                        shift and go to state 1
    procedure_set                  shift and go to state 2
    procedure                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> procedure_set .

    $end            reduce using rule 1 (program -> procedure_set .)


state 3

    (2) procedure_set -> procedure . procedure_set
    (3) procedure_set -> procedure .
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    $end            reduce using rule 3 (procedure_set -> procedure .)
    PROC            shift and go to state 4

    procedure                      shift and go to state 3
    procedure_set                  shift and go to state 5

state 4

    (4) procedure -> PROC . ID LPAREN statements RPAREN SEMICOLON

    ID              shift and go to state 6


state 5

    (2) procedure_set -> procedure procedure_set .

    $end            reduce using rule 2 (procedure_set -> procedure procedure_set .)


state 6

    (4) procedure -> PROC ID . LPAREN statements RPAREN SEMICOLON

    LPAREN          shift and go to state 7


state 7

    (4) procedure -> PROC ID LPAREN . statements RPAREN SEMICOLON
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39
    RPAREN          reduce using rule 77 (empty -> .)

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]

    statements                     shift and go to state 8
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 8

    (4) procedure -> PROC ID LPAREN statements . RPAREN SEMICOLON

    RPAREN          shift and go to state 40


state 9

    (5) statements -> statement .
    (6) statements -> statement . statements
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (statements -> statement .)
    RPAREN          reduce using rule 5 (statements -> statement .)
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]
  ! RPAREN          [ reduce using rule 77 (empty -> .) ]

    statement                      shift and go to state 9
    statements                     shift and go to state 41
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 10

    (7) statement -> variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 42


state 11

    (8) statement -> variable_update . SEMICOLON

    SEMICOLON       shift and go to state 43


state 12

    (9) statement -> alter_variable . SEMICOLON

    SEMICOLON       shift and go to state 44


state 13

    (10) statement -> variable_with_alter . SEMICOLON

    SEMICOLON       shift and go to state 45


state 14

    (11) statement -> alter_b_variable . SEMICOLON

    SEMICOLON       shift and go to state 46


state 15

    (12) statement -> signal_function . SEMICOLON

    SEMICOLON       shift and go to state 47


state 16

    (13) statement -> view_signal_function . SEMICOLON

    SEMICOLON       shift and go to state 48


state 17

    (14) statement -> is_true_function . SEMICOLON

    SEMICOLON       shift and go to state 49


state 18

    (15) statement -> case_statement . SEMICOLON

    SEMICOLON       shift and go to state 50


state 19

    (16) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 51


state 20

    (17) statement -> until_statement . SEMICOLON

    SEMICOLON       shift and go to state 52


state 21

    (18) statement -> repeat_statement . SEMICOLON

    SEMICOLON       shift and go to state 53


state 22

    (19) statement -> procedure_call . SEMICOLON

    SEMICOLON       shift and go to state 54


state 23

    (20) statement -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 55


state 24

    (21) statement -> break . SEMICOLON

    SEMICOLON       shift and go to state 56


state 25

    (22) statement -> empty .

    NEW             reduce using rule 22 (statement -> empty .)
    VALUES          reduce using rule 22 (statement -> empty .)
    ALTER           reduce using rule 22 (statement -> empty .)
    ALTER_B         reduce using rule 22 (statement -> empty .)
    SIGNAL          reduce using rule 22 (statement -> empty .)
    VIEW_SIGNAL     reduce using rule 22 (statement -> empty .)
    IS_TRUE         reduce using rule 22 (statement -> empty .)
    CASE            reduce using rule 22 (statement -> empty .)
    WHILE           reduce using rule 22 (statement -> empty .)
    UNTIL           reduce using rule 22 (statement -> empty .)
    REPEAT          reduce using rule 22 (statement -> empty .)
    CALL            reduce using rule 22 (statement -> empty .)
    PRINT_VALUES    reduce using rule 22 (statement -> empty .)
    BREAK           reduce using rule 22 (statement -> empty .)
    RPAREN          reduce using rule 22 (statement -> empty .)


state 26

    (23) variable_declaration -> NEW . ID COMMA type_value

    ID              shift and go to state 57


state 27

    (50) variable_update -> VALUES . LPAREN ID COMMA value RPAREN
    (52) variable_with_alter -> VALUES . LPAREN ID COMMA alter_variable RPAREN

    LPAREN          shift and go to state 58


state 28

    (51) alter_variable -> ALTER . LPAREN ID COMMA operator COMMA value RPAREN

    LPAREN          shift and go to state 59


state 29

    (53) alter_b_variable -> ALTER_B . LPAREN ID RPAREN

    LPAREN          shift and go to state 60


state 30

    (54) signal_function -> SIGNAL . LPAREN position_state COMMA position_state RPAREN

    LPAREN          shift and go to state 61


state 31

    (56) view_signal_function -> VIEW_SIGNAL . LPAREN position_state RPAREN

    LPAREN          shift and go to state 62


state 32

    (57) is_true_function -> IS_TRUE . LPAREN ID RPAREN

    LPAREN          shift and go to state 63


state 33

    (58) case_statement -> CASE . ID case_options
    (59) case_statement -> CASE . ID case_options else_option

    ID              shift and go to state 64


state 34

    (64) while_statement -> WHILE . condition LPAREN statements RPAREN
    (65) condition -> . value
    (66) condition -> . is_true_function
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    IS_TRUE         shift and go to state 32
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    condition                      shift and go to state 65
    value                          shift and go to state 67
    is_true_function               shift and go to state 68
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 35

    (67) until_statement -> UNTIL . LPAREN statements RPAREN condition

    LPAREN          shift and go to state 79


state 36

    (68) repeat_statement -> REPEAT . LPAREN statements RPAREN

    LPAREN          shift and go to state 80


state 37

    (69) procedure_call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 81


state 38

    (70) print_statement -> PRINT_VALUES . LPAREN print_value_list RPAREN

    LPAREN          shift and go to state 82


state 39

    (76) break -> BREAK .

    SEMICOLON       reduce using rule 76 (break -> BREAK .)


state 40

    (4) procedure -> PROC ID LPAREN statements RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 83


state 41

    (6) statements -> statement statements .

    RPAREN          reduce using rule 6 (statements -> statement statements .)


state 42

    (7) statement -> variable_declaration SEMICOLON .

    NEW             reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VALUES          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER_B         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    SIGNAL          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    IS_TRUE         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CASE            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    UNTIL           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    REPEAT          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CALL            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    PRINT_VALUES    reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    RPAREN          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)


state 43

    (8) statement -> variable_update SEMICOLON .

    NEW             reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VALUES          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER_B         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    SIGNAL          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 8 (statement -> variable_update SEMICOLON .)
    IS_TRUE         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CASE            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    UNTIL           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    REPEAT          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CALL            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    PRINT_VALUES    reduce using rule 8 (statement -> variable_update SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    RPAREN          reduce using rule 8 (statement -> variable_update SEMICOLON .)


state 44

    (9) statement -> alter_variable SEMICOLON .

    NEW             reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VALUES          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER_B         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    SIGNAL          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    IS_TRUE         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CASE            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    UNTIL           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    REPEAT          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CALL            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    RPAREN          reduce using rule 9 (statement -> alter_variable SEMICOLON .)


state 45

    (10) statement -> variable_with_alter SEMICOLON .

    NEW             reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VALUES          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER_B         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    SIGNAL          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    IS_TRUE         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CASE            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    UNTIL           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    REPEAT          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CALL            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    PRINT_VALUES    reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    RPAREN          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)


state 46

    (11) statement -> alter_b_variable SEMICOLON .

    NEW             reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VALUES          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER_B         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    SIGNAL          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    IS_TRUE         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CASE            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    UNTIL           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    REPEAT          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CALL            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    RPAREN          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)


state 47

    (12) statement -> signal_function SEMICOLON .

    NEW             reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VALUES          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER_B         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    SIGNAL          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 12 (statement -> signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CASE            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    UNTIL           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    REPEAT          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CALL            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 12 (statement -> signal_function SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    RPAREN          reduce using rule 12 (statement -> signal_function SEMICOLON .)


state 48

    (13) statement -> view_signal_function SEMICOLON .

    NEW             reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    VALUES          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    ALTER_B         reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    SIGNAL          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    CASE            reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    UNTIL           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    REPEAT          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    CALL            reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    RPAREN          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)


state 49

    (14) statement -> is_true_function SEMICOLON .

    NEW             reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    VALUES          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    ALTER_B         reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    SIGNAL          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    IS_TRUE         reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    CASE            reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    UNTIL           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    REPEAT          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    CALL            reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    RPAREN          reduce using rule 14 (statement -> is_true_function SEMICOLON .)


state 50

    (15) statement -> case_statement SEMICOLON .

    NEW             reduce using rule 15 (statement -> case_statement SEMICOLON .)
    VALUES          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    ALTER_B         reduce using rule 15 (statement -> case_statement SEMICOLON .)
    SIGNAL          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 15 (statement -> case_statement SEMICOLON .)
    IS_TRUE         reduce using rule 15 (statement -> case_statement SEMICOLON .)
    CASE            reduce using rule 15 (statement -> case_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    UNTIL           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    REPEAT          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    CALL            reduce using rule 15 (statement -> case_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 15 (statement -> case_statement SEMICOLON .)
    BREAK           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    RPAREN          reduce using rule 15 (statement -> case_statement SEMICOLON .)


state 51

    (16) statement -> while_statement SEMICOLON .

    NEW             reduce using rule 16 (statement -> while_statement SEMICOLON .)
    VALUES          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    ALTER_B         reduce using rule 16 (statement -> while_statement SEMICOLON .)
    SIGNAL          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 16 (statement -> while_statement SEMICOLON .)
    IS_TRUE         reduce using rule 16 (statement -> while_statement SEMICOLON .)
    CASE            reduce using rule 16 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    UNTIL           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    REPEAT          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    CALL            reduce using rule 16 (statement -> while_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 16 (statement -> while_statement SEMICOLON .)
    BREAK           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    RPAREN          reduce using rule 16 (statement -> while_statement SEMICOLON .)


state 52

    (17) statement -> until_statement SEMICOLON .

    NEW             reduce using rule 17 (statement -> until_statement SEMICOLON .)
    VALUES          reduce using rule 17 (statement -> until_statement SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    ALTER_B         reduce using rule 17 (statement -> until_statement SEMICOLON .)
    SIGNAL          reduce using rule 17 (statement -> until_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 17 (statement -> until_statement SEMICOLON .)
    IS_TRUE         reduce using rule 17 (statement -> until_statement SEMICOLON .)
    CASE            reduce using rule 17 (statement -> until_statement SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    UNTIL           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    REPEAT          reduce using rule 17 (statement -> until_statement SEMICOLON .)
    CALL            reduce using rule 17 (statement -> until_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 17 (statement -> until_statement SEMICOLON .)
    BREAK           reduce using rule 17 (statement -> until_statement SEMICOLON .)
    RPAREN          reduce using rule 17 (statement -> until_statement SEMICOLON .)


state 53

    (18) statement -> repeat_statement SEMICOLON .

    NEW             reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    VALUES          reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    ALTER_B         reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    SIGNAL          reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    IS_TRUE         reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    CASE            reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    UNTIL           reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    REPEAT          reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    CALL            reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    BREAK           reduce using rule 18 (statement -> repeat_statement SEMICOLON .)
    RPAREN          reduce using rule 18 (statement -> repeat_statement SEMICOLON .)


state 54

    (19) statement -> procedure_call SEMICOLON .

    NEW             reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    VALUES          reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    ALTER           reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    ALTER_B         reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    SIGNAL          reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    IS_TRUE         reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    CASE            reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    UNTIL           reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    REPEAT          reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    CALL            reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    PRINT_VALUES    reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    BREAK           reduce using rule 19 (statement -> procedure_call SEMICOLON .)
    RPAREN          reduce using rule 19 (statement -> procedure_call SEMICOLON .)


state 55

    (20) statement -> print_statement SEMICOLON .

    NEW             reduce using rule 20 (statement -> print_statement SEMICOLON .)
    VALUES          reduce using rule 20 (statement -> print_statement SEMICOLON .)
    ALTER           reduce using rule 20 (statement -> print_statement SEMICOLON .)
    ALTER_B         reduce using rule 20 (statement -> print_statement SEMICOLON .)
    SIGNAL          reduce using rule 20 (statement -> print_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 20 (statement -> print_statement SEMICOLON .)
    IS_TRUE         reduce using rule 20 (statement -> print_statement SEMICOLON .)
    CASE            reduce using rule 20 (statement -> print_statement SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> print_statement SEMICOLON .)
    UNTIL           reduce using rule 20 (statement -> print_statement SEMICOLON .)
    REPEAT          reduce using rule 20 (statement -> print_statement SEMICOLON .)
    CALL            reduce using rule 20 (statement -> print_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 20 (statement -> print_statement SEMICOLON .)
    BREAK           reduce using rule 20 (statement -> print_statement SEMICOLON .)
    RPAREN          reduce using rule 20 (statement -> print_statement SEMICOLON .)


state 56

    (21) statement -> break SEMICOLON .

    NEW             reduce using rule 21 (statement -> break SEMICOLON .)
    VALUES          reduce using rule 21 (statement -> break SEMICOLON .)
    ALTER           reduce using rule 21 (statement -> break SEMICOLON .)
    ALTER_B         reduce using rule 21 (statement -> break SEMICOLON .)
    SIGNAL          reduce using rule 21 (statement -> break SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 21 (statement -> break SEMICOLON .)
    IS_TRUE         reduce using rule 21 (statement -> break SEMICOLON .)
    CASE            reduce using rule 21 (statement -> break SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> break SEMICOLON .)
    UNTIL           reduce using rule 21 (statement -> break SEMICOLON .)
    REPEAT          reduce using rule 21 (statement -> break SEMICOLON .)
    CALL            reduce using rule 21 (statement -> break SEMICOLON .)
    PRINT_VALUES    reduce using rule 21 (statement -> break SEMICOLON .)
    BREAK           reduce using rule 21 (statement -> break SEMICOLON .)
    RPAREN          reduce using rule 21 (statement -> break SEMICOLON .)


state 57

    (23) variable_declaration -> NEW ID . COMMA type_value

    COMMA           shift and go to state 84


state 58

    (50) variable_update -> VALUES LPAREN . ID COMMA value RPAREN
    (52) variable_with_alter -> VALUES LPAREN . ID COMMA alter_variable RPAREN

    ID              shift and go to state 85


state 59

    (51) alter_variable -> ALTER LPAREN . ID COMMA operator COMMA value RPAREN

    ID              shift and go to state 86


state 60

    (53) alter_b_variable -> ALTER_B LPAREN . ID RPAREN

    ID              shift and go to state 87


state 61

    (54) signal_function -> SIGNAL LPAREN . position_state COMMA position_state RPAREN
    (55) position_state -> . value
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    position_state                 shift and go to state 88
    value                          shift and go to state 89
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 62

    (56) view_signal_function -> VIEW_SIGNAL LPAREN . position_state RPAREN
    (55) position_state -> . value
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    position_state                 shift and go to state 90
    value                          shift and go to state 89
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 63

    (57) is_true_function -> IS_TRUE LPAREN . ID RPAREN

    ID              shift and go to state 91


state 64

    (58) case_statement -> CASE ID . case_options
    (59) case_statement -> CASE ID . case_options else_option
    (60) case_options -> . when_statement
    (61) case_options -> . when_statement case_options
    (62) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    WHEN            shift and go to state 94

    case_options                   shift and go to state 92
    when_statement                 shift and go to state 93

state 65

    (64) while_statement -> WHILE condition . LPAREN statements RPAREN

    LPAREN          shift and go to state 95


state 66

    (38) math_operation_paren -> LPAREN . math_operation RPAREN
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 97
    NUMBER          shift and go to state 98
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    math_operation                 shift and go to state 96
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 67

    (65) condition -> value .

    LPAREN          reduce using rule 65 (condition -> value .)
    SEMICOLON       reduce using rule 65 (condition -> value .)


state 68

    (66) condition -> is_true_function .

    LPAREN          reduce using rule 66 (condition -> is_true_function .)
    SEMICOLON       reduce using rule 66 (condition -> is_true_function .)


state 69

    (28) value -> NUMBER .
    (40) math_value -> NUMBER .

    LPAREN          reduce using rule 28 (value -> NUMBER .)
    COMMA           reduce using rule 28 (value -> NUMBER .)
    RPAREN          reduce using rule 28 (value -> NUMBER .)
    THEN            reduce using rule 28 (value -> NUMBER .)
    SEMICOLON       reduce using rule 28 (value -> NUMBER .)
    ADD             reduce using rule 40 (math_value -> NUMBER .)
    SUB             reduce using rule 40 (math_value -> NUMBER .)
    MUL             reduce using rule 40 (math_value -> NUMBER .)
    DIV             reduce using rule 40 (math_value -> NUMBER .)
    REL_OP          reduce using rule 40 (math_value -> NUMBER .)


state 70

    (29) value -> BOOLEAN .

    LPAREN          reduce using rule 29 (value -> BOOLEAN .)
    COMMA           reduce using rule 29 (value -> BOOLEAN .)
    RPAREN          reduce using rule 29 (value -> BOOLEAN .)
    THEN            reduce using rule 29 (value -> BOOLEAN .)
    SEMICOLON       reduce using rule 29 (value -> BOOLEAN .)


state 71

    (30) value -> STRING .

    LPAREN          reduce using rule 30 (value -> STRING .)
    COMMA           reduce using rule 30 (value -> STRING .)
    RPAREN          reduce using rule 30 (value -> STRING .)
    THEN            reduce using rule 30 (value -> STRING .)
    SEMICOLON       reduce using rule 30 (value -> STRING .)


state 72

    (31) value -> ID .
    (39) math_value -> ID .

    LPAREN          reduce using rule 31 (value -> ID .)
    COMMA           reduce using rule 31 (value -> ID .)
    RPAREN          reduce using rule 31 (value -> ID .)
    THEN            reduce using rule 31 (value -> ID .)
    SEMICOLON       reduce using rule 31 (value -> ID .)
    ADD             reduce using rule 39 (math_value -> ID .)
    SUB             reduce using rule 39 (math_value -> ID .)
    MUL             reduce using rule 39 (math_value -> ID .)
    DIV             reduce using rule 39 (math_value -> ID .)
    REL_OP          reduce using rule 39 (math_value -> ID .)


state 73

    (32) value -> arith_op .

    LPAREN          reduce using rule 32 (value -> arith_op .)
    COMMA           reduce using rule 32 (value -> arith_op .)
    RPAREN          reduce using rule 32 (value -> arith_op .)
    THEN            reduce using rule 32 (value -> arith_op .)
    SEMICOLON       reduce using rule 32 (value -> arith_op .)


state 74

    (33) arith_op -> math_operation .
    (34) math_operation -> math_operation . operator math_operation
    (35) math_operation -> math_operation . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

    LPAREN          reduce using rule 33 (arith_op -> math_operation .)
    COMMA           reduce using rule 33 (arith_op -> math_operation .)
    RPAREN          reduce using rule 33 (arith_op -> math_operation .)
    THEN            reduce using rule 33 (arith_op -> math_operation .)
    SEMICOLON       reduce using rule 33 (arith_op -> math_operation .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

    operator                       shift and go to state 99

state 75

    (36) math_operation -> math_value . operator math_operation
    (37) math_operation -> math_value . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

    operator                       shift and go to state 105

state 76

    (41) math_value -> math_value_negative .

    ADD             reduce using rule 41 (math_value -> math_value_negative .)
    SUB             reduce using rule 41 (math_value -> math_value_negative .)
    MUL             reduce using rule 41 (math_value -> math_value_negative .)
    DIV             reduce using rule 41 (math_value -> math_value_negative .)
    REL_OP          reduce using rule 41 (math_value -> math_value_negative .)
    LPAREN          reduce using rule 41 (math_value -> math_value_negative .)
    COMMA           reduce using rule 41 (math_value -> math_value_negative .)
    RPAREN          reduce using rule 41 (math_value -> math_value_negative .)
    THEN            reduce using rule 41 (math_value -> math_value_negative .)
    SEMICOLON       reduce using rule 41 (math_value -> math_value_negative .)


state 77

    (42) math_value -> math_operation_paren .

    ADD             reduce using rule 42 (math_value -> math_operation_paren .)
    SUB             reduce using rule 42 (math_value -> math_operation_paren .)
    MUL             reduce using rule 42 (math_value -> math_operation_paren .)
    DIV             reduce using rule 42 (math_value -> math_operation_paren .)
    REL_OP          reduce using rule 42 (math_value -> math_operation_paren .)
    LPAREN          reduce using rule 42 (math_value -> math_operation_paren .)
    COMMA           reduce using rule 42 (math_value -> math_operation_paren .)
    RPAREN          reduce using rule 42 (math_value -> math_operation_paren .)
    THEN            reduce using rule 42 (math_value -> math_operation_paren .)
    SEMICOLON       reduce using rule 42 (math_value -> math_operation_paren .)


state 78

    (43) math_value_negative -> SUB . ID
    (44) math_value_negative -> SUB . NUMBER

    ID              shift and go to state 106
    NUMBER          shift and go to state 107


state 79

    (67) until_statement -> UNTIL LPAREN . statements RPAREN condition
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39
    RPAREN          reduce using rule 77 (empty -> .)

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]

    statements                     shift and go to state 108
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 80

    (68) repeat_statement -> REPEAT LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39
    RPAREN          reduce using rule 77 (empty -> .)

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]

    statements                     shift and go to state 109
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 81

    (69) procedure_call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 110


state 82

    (70) print_statement -> PRINT_VALUES LPAREN . print_value_list RPAREN
    (71) print_value_list -> . print_value
    (72) print_value_list -> . print_value COMMA print_value_list
    (73) print_value -> . value
    (74) print_value -> . is_true_function
    (75) print_value -> . view_signal_function
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    IS_TRUE         shift and go to state 32
    VIEW_SIGNAL     shift and go to state 31
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    print_value_list               shift and go to state 111
    print_value                    shift and go to state 112
    value                          shift and go to state 113
    is_true_function               shift and go to state 114
    view_signal_function           shift and go to state 115
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 83

    (4) procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .

    PROC            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)
    $end            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)


state 84

    (23) variable_declaration -> NEW ID COMMA . type_value
    (24) type_value -> . LPAREN type COMMA value RPAREN

    LPAREN          shift and go to state 117

    type_value                     shift and go to state 116

state 85

    (50) variable_update -> VALUES LPAREN ID . COMMA value RPAREN
    (52) variable_with_alter -> VALUES LPAREN ID . COMMA alter_variable RPAREN

    COMMA           shift and go to state 118


state 86

    (51) alter_variable -> ALTER LPAREN ID . COMMA operator COMMA value RPAREN

    COMMA           shift and go to state 119


state 87

    (53) alter_b_variable -> ALTER_B LPAREN ID . RPAREN

    RPAREN          shift and go to state 120


state 88

    (54) signal_function -> SIGNAL LPAREN position_state . COMMA position_state RPAREN

    COMMA           shift and go to state 121


state 89

    (55) position_state -> value .

    COMMA           reduce using rule 55 (position_state -> value .)
    RPAREN          reduce using rule 55 (position_state -> value .)


state 90

    (56) view_signal_function -> VIEW_SIGNAL LPAREN position_state . RPAREN

    RPAREN          shift and go to state 122


state 91

    (57) is_true_function -> IS_TRUE LPAREN ID . RPAREN

    RPAREN          shift and go to state 123


state 92

    (58) case_statement -> CASE ID case_options .
    (59) case_statement -> CASE ID case_options . else_option
    (63) else_option -> . ELSE LPAREN statements RPAREN

    SEMICOLON       reduce using rule 58 (case_statement -> CASE ID case_options .)
    ELSE            shift and go to state 125

    else_option                    shift and go to state 124

state 93

    (60) case_options -> when_statement .
    (61) case_options -> when_statement . case_options
    (60) case_options -> . when_statement
    (61) case_options -> . when_statement case_options
    (62) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    ELSE            reduce using rule 60 (case_options -> when_statement .)
    SEMICOLON       reduce using rule 60 (case_options -> when_statement .)
    WHEN            shift and go to state 94

    when_statement                 shift and go to state 93
    case_options                   shift and go to state 126

state 94

    (62) when_statement -> WHEN . value THEN LPAREN statements RPAREN
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    value                          shift and go to state 127
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 95

    (64) while_statement -> WHILE condition LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39
    RPAREN          reduce using rule 77 (empty -> .)

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]

    statements                     shift and go to state 128
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 96

    (38) math_operation_paren -> LPAREN math_operation . RPAREN
    (34) math_operation -> math_operation . operator math_operation
    (35) math_operation -> math_operation . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

    RPAREN          shift and go to state 129
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

    operator                       shift and go to state 99

state 97

    (39) math_value -> ID .

    ADD             reduce using rule 39 (math_value -> ID .)
    SUB             reduce using rule 39 (math_value -> ID .)
    MUL             reduce using rule 39 (math_value -> ID .)
    DIV             reduce using rule 39 (math_value -> ID .)
    REL_OP          reduce using rule 39 (math_value -> ID .)
    LPAREN          reduce using rule 39 (math_value -> ID .)
    COMMA           reduce using rule 39 (math_value -> ID .)
    RPAREN          reduce using rule 39 (math_value -> ID .)
    THEN            reduce using rule 39 (math_value -> ID .)
    SEMICOLON       reduce using rule 39 (math_value -> ID .)


state 98

    (40) math_value -> NUMBER .

    ADD             reduce using rule 40 (math_value -> NUMBER .)
    SUB             reduce using rule 40 (math_value -> NUMBER .)
    MUL             reduce using rule 40 (math_value -> NUMBER .)
    DIV             reduce using rule 40 (math_value -> NUMBER .)
    REL_OP          reduce using rule 40 (math_value -> NUMBER .)
    LPAREN          reduce using rule 40 (math_value -> NUMBER .)
    COMMA           reduce using rule 40 (math_value -> NUMBER .)
    RPAREN          reduce using rule 40 (math_value -> NUMBER .)
    THEN            reduce using rule 40 (math_value -> NUMBER .)
    SEMICOLON       reduce using rule 40 (math_value -> NUMBER .)


state 99

    (34) math_operation -> math_operation operator . math_operation
    (35) math_operation -> math_operation operator . math_value
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 97
    NUMBER          shift and go to state 98
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    math_operation                 shift and go to state 130
    math_value                     shift and go to state 131
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 100

    (45) operator -> ADD .

    ID              reduce using rule 45 (operator -> ADD .)
    NUMBER          reduce using rule 45 (operator -> ADD .)
    SUB             reduce using rule 45 (operator -> ADD .)
    LPAREN          reduce using rule 45 (operator -> ADD .)
    COMMA           reduce using rule 45 (operator -> ADD .)


state 101

    (46) operator -> SUB .

    ID              reduce using rule 46 (operator -> SUB .)
    NUMBER          reduce using rule 46 (operator -> SUB .)
    SUB             reduce using rule 46 (operator -> SUB .)
    LPAREN          reduce using rule 46 (operator -> SUB .)
    COMMA           reduce using rule 46 (operator -> SUB .)


state 102

    (47) operator -> MUL .

    ID              reduce using rule 47 (operator -> MUL .)
    NUMBER          reduce using rule 47 (operator -> MUL .)
    SUB             reduce using rule 47 (operator -> MUL .)
    LPAREN          reduce using rule 47 (operator -> MUL .)
    COMMA           reduce using rule 47 (operator -> MUL .)


state 103

    (48) operator -> DIV .

    ID              reduce using rule 48 (operator -> DIV .)
    NUMBER          reduce using rule 48 (operator -> DIV .)
    SUB             reduce using rule 48 (operator -> DIV .)
    LPAREN          reduce using rule 48 (operator -> DIV .)
    COMMA           reduce using rule 48 (operator -> DIV .)


state 104

    (49) operator -> REL_OP .

    ID              reduce using rule 49 (operator -> REL_OP .)
    NUMBER          reduce using rule 49 (operator -> REL_OP .)
    SUB             reduce using rule 49 (operator -> REL_OP .)
    LPAREN          reduce using rule 49 (operator -> REL_OP .)
    COMMA           reduce using rule 49 (operator -> REL_OP .)


state 105

    (36) math_operation -> math_value operator . math_operation
    (37) math_operation -> math_value operator . math_value
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 97
    NUMBER          shift and go to state 98
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    math_value                     shift and go to state 132
    math_operation                 shift and go to state 133
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 106

    (43) math_value_negative -> SUB ID .

    ADD             reduce using rule 43 (math_value_negative -> SUB ID .)
    SUB             reduce using rule 43 (math_value_negative -> SUB ID .)
    MUL             reduce using rule 43 (math_value_negative -> SUB ID .)
    DIV             reduce using rule 43 (math_value_negative -> SUB ID .)
    REL_OP          reduce using rule 43 (math_value_negative -> SUB ID .)
    LPAREN          reduce using rule 43 (math_value_negative -> SUB ID .)
    COMMA           reduce using rule 43 (math_value_negative -> SUB ID .)
    RPAREN          reduce using rule 43 (math_value_negative -> SUB ID .)
    THEN            reduce using rule 43 (math_value_negative -> SUB ID .)
    SEMICOLON       reduce using rule 43 (math_value_negative -> SUB ID .)


state 107

    (44) math_value_negative -> SUB NUMBER .

    ADD             reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    SUB             reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    MUL             reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    DIV             reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    REL_OP          reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    LPAREN          reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    COMMA           reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    RPAREN          reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    THEN            reduce using rule 44 (math_value_negative -> SUB NUMBER .)
    SEMICOLON       reduce using rule 44 (math_value_negative -> SUB NUMBER .)


state 108

    (67) until_statement -> UNTIL LPAREN statements . RPAREN condition

    RPAREN          shift and go to state 134


state 109

    (68) repeat_statement -> REPEAT LPAREN statements . RPAREN

    RPAREN          shift and go to state 135


state 110

    (69) procedure_call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 136


state 111

    (70) print_statement -> PRINT_VALUES LPAREN print_value_list . RPAREN

    RPAREN          shift and go to state 137


state 112

    (71) print_value_list -> print_value .
    (72) print_value_list -> print_value . COMMA print_value_list

    RPAREN          reduce using rule 71 (print_value_list -> print_value .)
    COMMA           shift and go to state 138


state 113

    (73) print_value -> value .

    COMMA           reduce using rule 73 (print_value -> value .)
    RPAREN          reduce using rule 73 (print_value -> value .)


state 114

    (74) print_value -> is_true_function .

    COMMA           reduce using rule 74 (print_value -> is_true_function .)
    RPAREN          reduce using rule 74 (print_value -> is_true_function .)


state 115

    (75) print_value -> view_signal_function .

    COMMA           reduce using rule 75 (print_value -> view_signal_function .)
    RPAREN          reduce using rule 75 (print_value -> view_signal_function .)


state 116

    (23) variable_declaration -> NEW ID COMMA type_value .

    SEMICOLON       reduce using rule 23 (variable_declaration -> NEW ID COMMA type_value .)


state 117

    (24) type_value -> LPAREN . type COMMA value RPAREN
    (25) type -> . NUM
    (26) type -> . BOOL
    (27) type -> . STRING

    NUM             shift and go to state 140
    BOOL            shift and go to state 141
    STRING          shift and go to state 142

    type                           shift and go to state 139

state 118

    (50) variable_update -> VALUES LPAREN ID COMMA . value RPAREN
    (52) variable_with_alter -> VALUES LPAREN ID COMMA . alter_variable RPAREN
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    ALTER           shift and go to state 28
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    value                          shift and go to state 143
    alter_variable                 shift and go to state 144
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 119

    (51) alter_variable -> ALTER LPAREN ID COMMA . operator COMMA value RPAREN
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

    operator                       shift and go to state 145

state 120

    (53) alter_b_variable -> ALTER_B LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 53 (alter_b_variable -> ALTER_B LPAREN ID RPAREN .)


state 121

    (54) signal_function -> SIGNAL LPAREN position_state COMMA . position_state RPAREN
    (55) position_state -> . value
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    position_state                 shift and go to state 146
    value                          shift and go to state 89
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 122

    (56) view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .

    SEMICOLON       reduce using rule 56 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    COMMA           reduce using rule 56 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    RPAREN          reduce using rule 56 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)


state 123

    (57) is_true_function -> IS_TRUE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 57 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    LPAREN          reduce using rule 57 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    COMMA           reduce using rule 57 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 57 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)


state 124

    (59) case_statement -> CASE ID case_options else_option .

    SEMICOLON       reduce using rule 59 (case_statement -> CASE ID case_options else_option .)


state 125

    (63) else_option -> ELSE . LPAREN statements RPAREN

    LPAREN          shift and go to state 147


state 126

    (61) case_options -> when_statement case_options .

    ELSE            reduce using rule 61 (case_options -> when_statement case_options .)
    SEMICOLON       reduce using rule 61 (case_options -> when_statement case_options .)


state 127

    (62) when_statement -> WHEN value . THEN LPAREN statements RPAREN

    THEN            shift and go to state 148


state 128

    (64) while_statement -> WHILE condition LPAREN statements . RPAREN

    RPAREN          shift and go to state 149


state 129

    (38) math_operation_paren -> LPAREN math_operation RPAREN .

    ADD             reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SUB             reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    MUL             reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    DIV             reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    REL_OP          reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    LPAREN          reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    COMMA           reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    RPAREN          reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    THEN            reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SEMICOLON       reduce using rule 38 (math_operation_paren -> LPAREN math_operation RPAREN .)


state 130

    (34) math_operation -> math_operation operator math_operation .
    (34) math_operation -> math_operation . operator math_operation
    (35) math_operation -> math_operation . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 34 (math_operation -> math_operation operator math_operation .)
    COMMA           reduce using rule 34 (math_operation -> math_operation operator math_operation .)
    RPAREN          reduce using rule 34 (math_operation -> math_operation operator math_operation .)
    THEN            reduce using rule 34 (math_operation -> math_operation operator math_operation .)
    SEMICOLON       reduce using rule 34 (math_operation -> math_operation operator math_operation .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

  ! ADD             [ reduce using rule 34 (math_operation -> math_operation operator math_operation .) ]
  ! SUB             [ reduce using rule 34 (math_operation -> math_operation operator math_operation .) ]
  ! MUL             [ reduce using rule 34 (math_operation -> math_operation operator math_operation .) ]
  ! DIV             [ reduce using rule 34 (math_operation -> math_operation operator math_operation .) ]
  ! REL_OP          [ reduce using rule 34 (math_operation -> math_operation operator math_operation .) ]

    operator                       shift and go to state 99

state 131

    (35) math_operation -> math_operation operator math_value .
    (36) math_operation -> math_value . operator math_operation
    (37) math_operation -> math_value . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 35 (math_operation -> math_operation operator math_value .)
    COMMA           reduce using rule 35 (math_operation -> math_operation operator math_value .)
    RPAREN          reduce using rule 35 (math_operation -> math_operation operator math_value .)
    THEN            reduce using rule 35 (math_operation -> math_operation operator math_value .)
    SEMICOLON       reduce using rule 35 (math_operation -> math_operation operator math_value .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

  ! ADD             [ reduce using rule 35 (math_operation -> math_operation operator math_value .) ]
  ! SUB             [ reduce using rule 35 (math_operation -> math_operation operator math_value .) ]
  ! MUL             [ reduce using rule 35 (math_operation -> math_operation operator math_value .) ]
  ! DIV             [ reduce using rule 35 (math_operation -> math_operation operator math_value .) ]
  ! REL_OP          [ reduce using rule 35 (math_operation -> math_operation operator math_value .) ]

    operator                       shift and go to state 105

state 132

    (37) math_operation -> math_value operator math_value .
    (36) math_operation -> math_value . operator math_operation
    (37) math_operation -> math_value . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 37 (math_operation -> math_value operator math_value .)
    COMMA           reduce using rule 37 (math_operation -> math_value operator math_value .)
    RPAREN          reduce using rule 37 (math_operation -> math_value operator math_value .)
    THEN            reduce using rule 37 (math_operation -> math_value operator math_value .)
    SEMICOLON       reduce using rule 37 (math_operation -> math_value operator math_value .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

  ! ADD             [ reduce using rule 37 (math_operation -> math_value operator math_value .) ]
  ! SUB             [ reduce using rule 37 (math_operation -> math_value operator math_value .) ]
  ! MUL             [ reduce using rule 37 (math_operation -> math_value operator math_value .) ]
  ! DIV             [ reduce using rule 37 (math_operation -> math_value operator math_value .) ]
  ! REL_OP          [ reduce using rule 37 (math_operation -> math_value operator math_value .) ]

    operator                       shift and go to state 105

state 133

    (36) math_operation -> math_value operator math_operation .
    (34) math_operation -> math_operation . operator math_operation
    (35) math_operation -> math_operation . operator math_value
    (45) operator -> . ADD
    (46) operator -> . SUB
    (47) operator -> . MUL
    (48) operator -> . DIV
    (49) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 36 (math_operation -> math_value operator math_operation .)
    COMMA           reduce using rule 36 (math_operation -> math_value operator math_operation .)
    RPAREN          reduce using rule 36 (math_operation -> math_value operator math_operation .)
    THEN            reduce using rule 36 (math_operation -> math_value operator math_operation .)
    SEMICOLON       reduce using rule 36 (math_operation -> math_value operator math_operation .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103
    REL_OP          shift and go to state 104

  ! ADD             [ reduce using rule 36 (math_operation -> math_value operator math_operation .) ]
  ! SUB             [ reduce using rule 36 (math_operation -> math_value operator math_operation .) ]
  ! MUL             [ reduce using rule 36 (math_operation -> math_value operator math_operation .) ]
  ! DIV             [ reduce using rule 36 (math_operation -> math_value operator math_operation .) ]
  ! REL_OP          [ reduce using rule 36 (math_operation -> math_value operator math_operation .) ]

    operator                       shift and go to state 99

state 134

    (67) until_statement -> UNTIL LPAREN statements RPAREN . condition
    (65) condition -> . value
    (66) condition -> . is_true_function
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    IS_TRUE         shift and go to state 32
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    condition                      shift and go to state 150
    value                          shift and go to state 67
    is_true_function               shift and go to state 68
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 135

    (68) repeat_statement -> REPEAT LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 68 (repeat_statement -> REPEAT LPAREN statements RPAREN .)


state 136

    (69) procedure_call -> CALL LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 69 (procedure_call -> CALL LPAREN ID RPAREN .)


state 137

    (70) print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .

    SEMICOLON       reduce using rule 70 (print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .)


state 138

    (72) print_value_list -> print_value COMMA . print_value_list
    (71) print_value_list -> . print_value
    (72) print_value_list -> . print_value COMMA print_value_list
    (73) print_value -> . value
    (74) print_value -> . is_true_function
    (75) print_value -> . view_signal_function
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    IS_TRUE         shift and go to state 32
    VIEW_SIGNAL     shift and go to state 31
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    print_value                    shift and go to state 112
    print_value_list               shift and go to state 151
    value                          shift and go to state 113
    is_true_function               shift and go to state 114
    view_signal_function           shift and go to state 115
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 139

    (24) type_value -> LPAREN type . COMMA value RPAREN

    COMMA           shift and go to state 152


state 140

    (25) type -> NUM .

    COMMA           reduce using rule 25 (type -> NUM .)


state 141

    (26) type -> BOOL .

    COMMA           reduce using rule 26 (type -> BOOL .)


state 142

    (27) type -> STRING .

    COMMA           reduce using rule 27 (type -> STRING .)


state 143

    (50) variable_update -> VALUES LPAREN ID COMMA value . RPAREN

    RPAREN          shift and go to state 153


state 144

    (52) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable . RPAREN

    RPAREN          shift and go to state 154


state 145

    (51) alter_variable -> ALTER LPAREN ID COMMA operator . COMMA value RPAREN

    COMMA           shift and go to state 155


state 146

    (54) signal_function -> SIGNAL LPAREN position_state COMMA position_state . RPAREN

    RPAREN          shift and go to state 156


state 147

    (63) else_option -> ELSE LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39
    RPAREN          reduce using rule 77 (empty -> .)

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]

    statements                     shift and go to state 157
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 148

    (62) when_statement -> WHEN value THEN . LPAREN statements RPAREN

    LPAREN          shift and go to state 158


state 149

    (64) while_statement -> WHILE condition LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 64 (while_statement -> WHILE condition LPAREN statements RPAREN .)


state 150

    (67) until_statement -> UNTIL LPAREN statements RPAREN condition .

    SEMICOLON       reduce using rule 67 (until_statement -> UNTIL LPAREN statements RPAREN condition .)


state 151

    (72) print_value_list -> print_value COMMA print_value_list .

    RPAREN          reduce using rule 72 (print_value_list -> print_value COMMA print_value_list .)


state 152

    (24) type_value -> LPAREN type COMMA . value RPAREN
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    value                          shift and go to state 159
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 153

    (50) variable_update -> VALUES LPAREN ID COMMA value RPAREN .

    SEMICOLON       reduce using rule 50 (variable_update -> VALUES LPAREN ID COMMA value RPAREN .)


state 154

    (52) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .

    SEMICOLON       reduce using rule 52 (variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .)


state 155

    (51) alter_variable -> ALTER LPAREN ID COMMA operator COMMA . value RPAREN
    (28) value -> . NUMBER
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . ID
    (32) value -> . arith_op
    (33) arith_op -> . math_operation
    (34) math_operation -> . math_operation operator math_operation
    (35) math_operation -> . math_operation operator math_value
    (36) math_operation -> . math_value operator math_operation
    (37) math_operation -> . math_value operator math_value
    (39) math_value -> . ID
    (40) math_value -> . NUMBER
    (41) math_value -> . math_value_negative
    (42) math_value -> . math_operation_paren
    (43) math_value_negative -> . SUB ID
    (44) math_value_negative -> . SUB NUMBER
    (38) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 69
    BOOLEAN         shift and go to state 70
    STRING          shift and go to state 71
    ID              shift and go to state 72
    SUB             shift and go to state 78
    LPAREN          shift and go to state 66

    value                          shift and go to state 160
    arith_op                       shift and go to state 73
    math_operation                 shift and go to state 74
    math_value                     shift and go to state 75
    math_value_negative            shift and go to state 76
    math_operation_paren           shift and go to state 77

state 156

    (54) signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .

    SEMICOLON       reduce using rule 54 (signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .)


state 157

    (63) else_option -> ELSE LPAREN statements . RPAREN

    RPAREN          shift and go to state 161


state 158

    (62) when_statement -> WHEN value THEN LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . until_statement SEMICOLON
    (18) statement -> . repeat_statement SEMICOLON
    (19) statement -> . procedure_call SEMICOLON
    (20) statement -> . print_statement SEMICOLON
    (21) statement -> . break SEMICOLON
    (22) statement -> . empty
    (23) variable_declaration -> . NEW ID COMMA type_value
    (50) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (51) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (52) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (53) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (54) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (56) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (57) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (58) case_statement -> . CASE ID case_options
    (59) case_statement -> . CASE ID case_options else_option
    (64) while_statement -> . WHILE condition LPAREN statements RPAREN
    (67) until_statement -> . UNTIL LPAREN statements RPAREN condition
    (68) repeat_statement -> . REPEAT LPAREN statements RPAREN
    (69) procedure_call -> . CALL LPAREN ID RPAREN
    (70) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (76) break -> . BREAK
    (77) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    NEW             shift and go to state 26
    VALUES          shift and go to state 27
    ALTER           shift and go to state 28
    ALTER_B         shift and go to state 29
    SIGNAL          shift and go to state 30
    VIEW_SIGNAL     shift and go to state 31
    IS_TRUE         shift and go to state 32
    CASE            shift and go to state 33
    WHILE           shift and go to state 34
    UNTIL           shift and go to state 35
    REPEAT          shift and go to state 36
    CALL            shift and go to state 37
    PRINT_VALUES    shift and go to state 38
    BREAK           shift and go to state 39
    RPAREN          reduce using rule 77 (empty -> .)

  ! NEW             [ reduce using rule 77 (empty -> .) ]
  ! VALUES          [ reduce using rule 77 (empty -> .) ]
  ! ALTER           [ reduce using rule 77 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 77 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 77 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 77 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 77 (empty -> .) ]
  ! CASE            [ reduce using rule 77 (empty -> .) ]
  ! WHILE           [ reduce using rule 77 (empty -> .) ]
  ! UNTIL           [ reduce using rule 77 (empty -> .) ]
  ! REPEAT          [ reduce using rule 77 (empty -> .) ]
  ! CALL            [ reduce using rule 77 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 77 (empty -> .) ]
  ! BREAK           [ reduce using rule 77 (empty -> .) ]

    statements                     shift and go to state 162
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    until_statement                shift and go to state 20
    repeat_statement               shift and go to state 21
    procedure_call                 shift and go to state 22
    print_statement                shift and go to state 23
    break                          shift and go to state 24
    empty                          shift and go to state 25

state 159

    (24) type_value -> LPAREN type COMMA value . RPAREN

    RPAREN          shift and go to state 163


state 160

    (51) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value . RPAREN

    RPAREN          shift and go to state 164


state 161

    (63) else_option -> ELSE LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 63 (else_option -> ELSE LPAREN statements RPAREN .)


state 162

    (62) when_statement -> WHEN value THEN LPAREN statements . RPAREN

    RPAREN          shift and go to state 165


state 163

    (24) type_value -> LPAREN type COMMA value RPAREN .

    SEMICOLON       reduce using rule 24 (type_value -> LPAREN type COMMA value RPAREN .)


state 164

    (51) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .

    SEMICOLON       reduce using rule 51 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)
    RPAREN          reduce using rule 51 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)


state 165

    (62) when_statement -> WHEN value THEN LPAREN statements RPAREN .

    WHEN            reduce using rule 62 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    ELSE            reduce using rule 62 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    SEMICOLON       reduce using rule 62 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEW in state 7 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 7 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 7 resolved as shift
WARNING: shift/reduce conflict for CASE in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 7 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 7 resolved as shift
WARNING: shift/reduce conflict for CALL in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 7 resolved as shift
WARNING: shift/reduce conflict for NEW in state 9 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 9 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 9 resolved as shift
WARNING: shift/reduce conflict for CASE in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for CALL in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 9 resolved as shift
WARNING: shift/reduce conflict for NEW in state 79 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 79 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 79 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 79 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 79 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 79 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 79 resolved as shift
WARNING: shift/reduce conflict for CASE in state 79 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 79 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 79 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 79 resolved as shift
WARNING: shift/reduce conflict for CALL in state 79 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 79 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 79 resolved as shift
WARNING: shift/reduce conflict for NEW in state 80 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 80 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 80 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 80 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 80 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 80 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 80 resolved as shift
WARNING: shift/reduce conflict for CASE in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 80 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 80 resolved as shift
WARNING: shift/reduce conflict for CALL in state 80 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 80 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 80 resolved as shift
WARNING: shift/reduce conflict for NEW in state 95 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 95 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 95 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 95 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 95 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 95 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 95 resolved as shift
WARNING: shift/reduce conflict for CASE in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 95 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 95 resolved as shift
WARNING: shift/reduce conflict for CALL in state 95 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 95 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 95 resolved as shift
WARNING: shift/reduce conflict for ADD in state 130 resolved as shift
WARNING: shift/reduce conflict for SUB in state 130 resolved as shift
WARNING: shift/reduce conflict for MUL in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 130 resolved as shift
WARNING: shift/reduce conflict for ADD in state 131 resolved as shift
WARNING: shift/reduce conflict for SUB in state 131 resolved as shift
WARNING: shift/reduce conflict for MUL in state 131 resolved as shift
WARNING: shift/reduce conflict for DIV in state 131 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for ADD in state 132 resolved as shift
WARNING: shift/reduce conflict for SUB in state 132 resolved as shift
WARNING: shift/reduce conflict for MUL in state 132 resolved as shift
WARNING: shift/reduce conflict for DIV in state 132 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 132 resolved as shift
WARNING: shift/reduce conflict for ADD in state 133 resolved as shift
WARNING: shift/reduce conflict for SUB in state 133 resolved as shift
WARNING: shift/reduce conflict for MUL in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV in state 133 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 133 resolved as shift
WARNING: shift/reduce conflict for NEW in state 147 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 147 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 147 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 147 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 147 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 147 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 147 resolved as shift
WARNING: shift/reduce conflict for CASE in state 147 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 147 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 147 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 147 resolved as shift
WARNING: shift/reduce conflict for CALL in state 147 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 147 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 147 resolved as shift
WARNING: shift/reduce conflict for NEW in state 158 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 158 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 158 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 158 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 158 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 158 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 158 resolved as shift
WARNING: shift/reduce conflict for CASE in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 158 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 158 resolved as shift
WARNING: shift/reduce conflict for CALL in state 158 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 158 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 158 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 9
