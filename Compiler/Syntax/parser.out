Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARITH_OP
    AT
    BREAK
    COMMENT
    EQUAL
    False
    GREATER_THAN
    GREATER_THAN_EQUAL
    LESS_THAN
    LESS_THAN_EQUAL
    MASTER
    NOT_EQUAL
    REPEAT
    TRUE
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> procedure_set
Rule 2     procedure_set -> procedure procedure_set
Rule 3     procedure_set -> procedure
Rule 4     procedure -> PROC ID LPAREN statements RPAREN SEMICOLON
Rule 5     statements -> statement
Rule 6     statements -> statement statements
Rule 7     statement -> variable_declaration SEMICOLON
Rule 8     statement -> variable_update SEMICOLON
Rule 9     statement -> alter_variable SEMICOLON
Rule 10    statement -> variable_with_alter SEMICOLON
Rule 11    statement -> alter_b_variable SEMICOLON
Rule 12    statement -> signal_function SEMICOLON
Rule 13    statement -> view_signal_function SEMICOLON
Rule 14    statement -> is_true_function SEMICOLON
Rule 15    statement -> case_statement SEMICOLON
Rule 16    statement -> while_statement SEMICOLON
Rule 17    statement -> procedure_call SEMICOLON
Rule 18    statement -> print_statement SEMICOLON
Rule 19    statement -> empty
Rule 20    variable_declaration -> NEW ID COMMA type_value
Rule 21    type_value -> LPAREN type COMMA value RPAREN
Rule 22    type -> NUM
Rule 23    type -> BOOL
Rule 24    type -> STRING
Rule 25    value -> NUMBER
Rule 26    value -> BOOLEAN
Rule 27    value -> STRING
Rule 28    value -> ID
Rule 29    value -> arith_op
Rule 30    arith_op -> math_operation
Rule 31    math_operation -> math_operation operator math_operation
Rule 32    math_operation -> math_operation operator math_value
Rule 33    math_operation -> math_value operator math_operation
Rule 34    math_operation -> math_value operator math_value
Rule 35    math_operation_paren -> LPAREN math_operation RPAREN
Rule 36    math_value -> ID
Rule 37    math_value -> NUMBER
Rule 38    math_value -> math_value_negative
Rule 39    math_value -> math_operation_paren
Rule 40    math_value_negative -> SUB ID
Rule 41    math_value_negative -> SUB NUMBER
Rule 42    operator -> ADD
Rule 43    operator -> SUB
Rule 44    operator -> MUL
Rule 45    operator -> DIV
Rule 46    operator -> REL_OP
Rule 47    variable_update -> VALUES LPAREN ID COMMA value RPAREN
Rule 48    alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN
Rule 49    variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN
Rule 50    alter_b_variable -> ALTER_B LPAREN ID RPAREN
Rule 51    signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN
Rule 52    position_state -> value
Rule 53    view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN
Rule 54    is_true_function -> IS_TRUE LPAREN ID RPAREN
Rule 55    case_statement -> CASE ID case_options
Rule 56    case_statement -> CASE ID case_options else_option
Rule 57    case_options -> when_statement
Rule 58    case_options -> when_statement case_options
Rule 59    when_statement -> WHEN value THEN LPAREN statements RPAREN
Rule 60    else_option -> ELSE LPAREN statements RPAREN
Rule 61    while_statement -> WHILE condition LPAREN statements RPAREN
Rule 62    condition -> value
Rule 63    condition -> is_true_function
Rule 64    procedure_call -> CALL LPAREN ID RPAREN
Rule 65    print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN
Rule 66    print_value_list -> print_value
Rule 67    print_value_list -> print_value COMMA print_value_list
Rule 68    print_value -> value
Rule 69    print_value -> is_true_function
Rule 70    print_value -> view_signal_function
Rule 71    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 42
ALTER                : 48
ALTER_B              : 50
ARITH_OP             : 
AT                   : 
BOOL                 : 23
BOOLEAN              : 26
BREAK                : 
CALL                 : 64
CASE                 : 55 56
COMMA                : 20 21 47 48 48 49 51 67
COMMENT              : 
DIV                  : 45
ELSE                 : 60
EQUAL                : 
False                : 
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
ID                   : 4 20 28 36 40 47 48 49 50 54 55 56 64
IS_TRUE              : 54
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LPAREN               : 4 21 35 47 48 49 50 51 53 54 59 60 61 64 65
MASTER               : 
MUL                  : 44
NEW                  : 20
NOT_EQUAL            : 
NUM                  : 22
NUMBER               : 25 37 41
PRINT_VALUES         : 65
PROC                 : 4
REL_OP               : 46
REPEAT               : 
RPAREN               : 4 21 35 47 48 49 50 51 53 54 59 60 61 64 65
SEMICOLON            : 4 7 8 9 10 11 12 13 14 15 16 17 18
SIGNAL               : 51
STRING               : 24 27
SUB                  : 40 41 43
THEN                 : 59
TRUE                 : 
UNTIL                : 
VALUES               : 47 49
VIEW_SIGNAL          : 53
WHEN                 : 59
WHILE                : 61
error                : 

Nonterminals, with rules where they appear

alter_b_variable     : 11
alter_variable       : 9 49
arith_op             : 29
case_options         : 55 56 58
case_statement       : 15
condition            : 61
else_option          : 56
empty                : 19
is_true_function     : 14 63 69
math_operation       : 30 31 31 32 33 35
math_operation_paren : 39
math_value           : 32 33 34 34
math_value_negative  : 38
operator             : 31 32 33 34 48
position_state       : 51 51 53
print_statement      : 18
print_value          : 66 67
print_value_list     : 65 67
procedure            : 2 3
procedure_call       : 17
procedure_set        : 1 2
program              : 0
signal_function      : 12
statement            : 5 6
statements           : 4 6 59 60 61
type                 : 21
type_value           : 20
value                : 21 47 48 52 59 62 68
variable_declaration : 7
variable_update      : 8
variable_with_alter  : 10
view_signal_function : 13 70
when_statement       : 57 58
while_statement      : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . procedure_set
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    PROC            shift and go to state 4

    program                        shift and go to state 1
    procedure_set                  shift and go to state 2
    procedure                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> procedure_set .

    $end            reduce using rule 1 (program -> procedure_set .)


state 3

    (2) procedure_set -> procedure . procedure_set
    (3) procedure_set -> procedure .
    (2) procedure_set -> . procedure procedure_set
    (3) procedure_set -> . procedure
    (4) procedure -> . PROC ID LPAREN statements RPAREN SEMICOLON

    $end            reduce using rule 3 (procedure_set -> procedure .)
    PROC            shift and go to state 4

    procedure                      shift and go to state 3
    procedure_set                  shift and go to state 5

state 4

    (4) procedure -> PROC . ID LPAREN statements RPAREN SEMICOLON

    ID              shift and go to state 6


state 5

    (2) procedure_set -> procedure procedure_set .

    $end            reduce using rule 2 (procedure_set -> procedure procedure_set .)


state 6

    (4) procedure -> PROC ID . LPAREN statements RPAREN SEMICOLON

    LPAREN          shift and go to state 7


state 7

    (4) procedure -> PROC ID LPAREN . statements RPAREN SEMICOLON
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . procedure_call SEMICOLON
    (18) statement -> . print_statement SEMICOLON
    (19) statement -> . empty
    (20) variable_declaration -> . NEW ID COMMA type_value
    (47) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (48) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (49) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (50) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (51) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (55) case_statement -> . CASE ID case_options
    (56) case_statement -> . CASE ID case_options else_option
    (61) while_statement -> . WHILE condition LPAREN statements RPAREN
    (64) procedure_call -> . CALL LPAREN ID RPAREN
    (65) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (71) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 23
    VALUES          shift and go to state 24
    ALTER           shift and go to state 25
    ALTER_B         shift and go to state 26
    SIGNAL          shift and go to state 27
    VIEW_SIGNAL     shift and go to state 28
    IS_TRUE         shift and go to state 29
    CASE            shift and go to state 30
    WHILE           shift and go to state 31
    CALL            shift and go to state 32
    PRINT_VALUES    shift and go to state 33
    RPAREN          reduce using rule 71 (empty -> .)

  ! NEW             [ reduce using rule 71 (empty -> .) ]
  ! VALUES          [ reduce using rule 71 (empty -> .) ]
  ! ALTER           [ reduce using rule 71 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 71 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 71 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 71 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 71 (empty -> .) ]
  ! CASE            [ reduce using rule 71 (empty -> .) ]
  ! WHILE           [ reduce using rule 71 (empty -> .) ]
  ! CALL            [ reduce using rule 71 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 71 (empty -> .) ]

    statements                     shift and go to state 8
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    procedure_call                 shift and go to state 20
    print_statement                shift and go to state 21
    empty                          shift and go to state 22

state 8

    (4) procedure -> PROC ID LPAREN statements . RPAREN SEMICOLON

    RPAREN          shift and go to state 34


state 9

    (5) statements -> statement .
    (6) statements -> statement . statements
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . procedure_call SEMICOLON
    (18) statement -> . print_statement SEMICOLON
    (19) statement -> . empty
    (20) variable_declaration -> . NEW ID COMMA type_value
    (47) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (48) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (49) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (50) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (51) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (55) case_statement -> . CASE ID case_options
    (56) case_statement -> . CASE ID case_options else_option
    (61) while_statement -> . WHILE condition LPAREN statements RPAREN
    (64) procedure_call -> . CALL LPAREN ID RPAREN
    (65) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (71) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (statements -> statement .)
    RPAREN          reduce using rule 5 (statements -> statement .)
    NEW             shift and go to state 23
    VALUES          shift and go to state 24
    ALTER           shift and go to state 25
    ALTER_B         shift and go to state 26
    SIGNAL          shift and go to state 27
    VIEW_SIGNAL     shift and go to state 28
    IS_TRUE         shift and go to state 29
    CASE            shift and go to state 30
    WHILE           shift and go to state 31
    CALL            shift and go to state 32
    PRINT_VALUES    shift and go to state 33

  ! NEW             [ reduce using rule 71 (empty -> .) ]
  ! VALUES          [ reduce using rule 71 (empty -> .) ]
  ! ALTER           [ reduce using rule 71 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 71 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 71 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 71 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 71 (empty -> .) ]
  ! CASE            [ reduce using rule 71 (empty -> .) ]
  ! WHILE           [ reduce using rule 71 (empty -> .) ]
  ! CALL            [ reduce using rule 71 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 71 (empty -> .) ]
  ! RPAREN          [ reduce using rule 71 (empty -> .) ]

    statement                      shift and go to state 9
    statements                     shift and go to state 35
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    procedure_call                 shift and go to state 20
    print_statement                shift and go to state 21
    empty                          shift and go to state 22

state 10

    (7) statement -> variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 36


state 11

    (8) statement -> variable_update . SEMICOLON

    SEMICOLON       shift and go to state 37


state 12

    (9) statement -> alter_variable . SEMICOLON

    SEMICOLON       shift and go to state 38


state 13

    (10) statement -> variable_with_alter . SEMICOLON

    SEMICOLON       shift and go to state 39


state 14

    (11) statement -> alter_b_variable . SEMICOLON

    SEMICOLON       shift and go to state 40


state 15

    (12) statement -> signal_function . SEMICOLON

    SEMICOLON       shift and go to state 41


state 16

    (13) statement -> view_signal_function . SEMICOLON

    SEMICOLON       shift and go to state 42


state 17

    (14) statement -> is_true_function . SEMICOLON

    SEMICOLON       shift and go to state 43


state 18

    (15) statement -> case_statement . SEMICOLON

    SEMICOLON       shift and go to state 44


state 19

    (16) statement -> while_statement . SEMICOLON

    SEMICOLON       shift and go to state 45


state 20

    (17) statement -> procedure_call . SEMICOLON

    SEMICOLON       shift and go to state 46


state 21

    (18) statement -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 47


state 22

    (19) statement -> empty .

    NEW             reduce using rule 19 (statement -> empty .)
    VALUES          reduce using rule 19 (statement -> empty .)
    ALTER           reduce using rule 19 (statement -> empty .)
    ALTER_B         reduce using rule 19 (statement -> empty .)
    SIGNAL          reduce using rule 19 (statement -> empty .)
    VIEW_SIGNAL     reduce using rule 19 (statement -> empty .)
    IS_TRUE         reduce using rule 19 (statement -> empty .)
    CASE            reduce using rule 19 (statement -> empty .)
    WHILE           reduce using rule 19 (statement -> empty .)
    CALL            reduce using rule 19 (statement -> empty .)
    PRINT_VALUES    reduce using rule 19 (statement -> empty .)
    RPAREN          reduce using rule 19 (statement -> empty .)


state 23

    (20) variable_declaration -> NEW . ID COMMA type_value

    ID              shift and go to state 48


state 24

    (47) variable_update -> VALUES . LPAREN ID COMMA value RPAREN
    (49) variable_with_alter -> VALUES . LPAREN ID COMMA alter_variable RPAREN

    LPAREN          shift and go to state 49


state 25

    (48) alter_variable -> ALTER . LPAREN ID COMMA operator COMMA value RPAREN

    LPAREN          shift and go to state 50


state 26

    (50) alter_b_variable -> ALTER_B . LPAREN ID RPAREN

    LPAREN          shift and go to state 51


state 27

    (51) signal_function -> SIGNAL . LPAREN position_state COMMA position_state RPAREN

    LPAREN          shift and go to state 52


state 28

    (53) view_signal_function -> VIEW_SIGNAL . LPAREN position_state RPAREN

    LPAREN          shift and go to state 53


state 29

    (54) is_true_function -> IS_TRUE . LPAREN ID RPAREN

    LPAREN          shift and go to state 54


state 30

    (55) case_statement -> CASE . ID case_options
    (56) case_statement -> CASE . ID case_options else_option

    ID              shift and go to state 55


state 31

    (61) while_statement -> WHILE . condition LPAREN statements RPAREN
    (62) condition -> . value
    (63) condition -> . is_true_function
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    IS_TRUE         shift and go to state 29
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    condition                      shift and go to state 56
    value                          shift and go to state 58
    is_true_function               shift and go to state 59
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 32

    (64) procedure_call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 70


state 33

    (65) print_statement -> PRINT_VALUES . LPAREN print_value_list RPAREN

    LPAREN          shift and go to state 71


state 34

    (4) procedure -> PROC ID LPAREN statements RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 72


state 35

    (6) statements -> statement statements .

    RPAREN          reduce using rule 6 (statements -> statement statements .)


state 36

    (7) statement -> variable_declaration SEMICOLON .

    NEW             reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VALUES          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    ALTER_B         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    SIGNAL          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    IS_TRUE         reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CASE            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    CALL            reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    PRINT_VALUES    reduce using rule 7 (statement -> variable_declaration SEMICOLON .)
    RPAREN          reduce using rule 7 (statement -> variable_declaration SEMICOLON .)


state 37

    (8) statement -> variable_update SEMICOLON .

    NEW             reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VALUES          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    ALTER_B         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    SIGNAL          reduce using rule 8 (statement -> variable_update SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 8 (statement -> variable_update SEMICOLON .)
    IS_TRUE         reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CASE            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> variable_update SEMICOLON .)
    CALL            reduce using rule 8 (statement -> variable_update SEMICOLON .)
    PRINT_VALUES    reduce using rule 8 (statement -> variable_update SEMICOLON .)
    RPAREN          reduce using rule 8 (statement -> variable_update SEMICOLON .)


state 38

    (9) statement -> alter_variable SEMICOLON .

    NEW             reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VALUES          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    ALTER_B         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    SIGNAL          reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    IS_TRUE         reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CASE            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    CALL            reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 9 (statement -> alter_variable SEMICOLON .)
    RPAREN          reduce using rule 9 (statement -> alter_variable SEMICOLON .)


state 39

    (10) statement -> variable_with_alter SEMICOLON .

    NEW             reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VALUES          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    ALTER_B         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    SIGNAL          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    IS_TRUE         reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CASE            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    CALL            reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    PRINT_VALUES    reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)
    RPAREN          reduce using rule 10 (statement -> variable_with_alter SEMICOLON .)


state 40

    (11) statement -> alter_b_variable SEMICOLON .

    NEW             reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VALUES          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    ALTER_B         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    SIGNAL          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    IS_TRUE         reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CASE            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    CALL            reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    PRINT_VALUES    reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)
    RPAREN          reduce using rule 11 (statement -> alter_b_variable SEMICOLON .)


state 41

    (12) statement -> signal_function SEMICOLON .

    NEW             reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VALUES          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    ALTER_B         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    SIGNAL          reduce using rule 12 (statement -> signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 12 (statement -> signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CASE            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> signal_function SEMICOLON .)
    CALL            reduce using rule 12 (statement -> signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 12 (statement -> signal_function SEMICOLON .)
    RPAREN          reduce using rule 12 (statement -> signal_function SEMICOLON .)


state 42

    (13) statement -> view_signal_function SEMICOLON .

    NEW             reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    VALUES          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    ALTER           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    ALTER_B         reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    SIGNAL          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    IS_TRUE         reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    CASE            reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    CALL            reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 13 (statement -> view_signal_function SEMICOLON .)
    RPAREN          reduce using rule 13 (statement -> view_signal_function SEMICOLON .)


state 43

    (14) statement -> is_true_function SEMICOLON .

    NEW             reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    VALUES          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    ALTER           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    ALTER_B         reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    SIGNAL          reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    IS_TRUE         reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    CASE            reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    CALL            reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    PRINT_VALUES    reduce using rule 14 (statement -> is_true_function SEMICOLON .)
    RPAREN          reduce using rule 14 (statement -> is_true_function SEMICOLON .)


state 44

    (15) statement -> case_statement SEMICOLON .

    NEW             reduce using rule 15 (statement -> case_statement SEMICOLON .)
    VALUES          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    ALTER           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    ALTER_B         reduce using rule 15 (statement -> case_statement SEMICOLON .)
    SIGNAL          reduce using rule 15 (statement -> case_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 15 (statement -> case_statement SEMICOLON .)
    IS_TRUE         reduce using rule 15 (statement -> case_statement SEMICOLON .)
    CASE            reduce using rule 15 (statement -> case_statement SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> case_statement SEMICOLON .)
    CALL            reduce using rule 15 (statement -> case_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 15 (statement -> case_statement SEMICOLON .)
    RPAREN          reduce using rule 15 (statement -> case_statement SEMICOLON .)


state 45

    (16) statement -> while_statement SEMICOLON .

    NEW             reduce using rule 16 (statement -> while_statement SEMICOLON .)
    VALUES          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    ALTER           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    ALTER_B         reduce using rule 16 (statement -> while_statement SEMICOLON .)
    SIGNAL          reduce using rule 16 (statement -> while_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 16 (statement -> while_statement SEMICOLON .)
    IS_TRUE         reduce using rule 16 (statement -> while_statement SEMICOLON .)
    CASE            reduce using rule 16 (statement -> while_statement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> while_statement SEMICOLON .)
    CALL            reduce using rule 16 (statement -> while_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 16 (statement -> while_statement SEMICOLON .)
    RPAREN          reduce using rule 16 (statement -> while_statement SEMICOLON .)


state 46

    (17) statement -> procedure_call SEMICOLON .

    NEW             reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    VALUES          reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    ALTER           reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    ALTER_B         reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    SIGNAL          reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    IS_TRUE         reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    CASE            reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    CALL            reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    PRINT_VALUES    reduce using rule 17 (statement -> procedure_call SEMICOLON .)
    RPAREN          reduce using rule 17 (statement -> procedure_call SEMICOLON .)


state 47

    (18) statement -> print_statement SEMICOLON .

    NEW             reduce using rule 18 (statement -> print_statement SEMICOLON .)
    VALUES          reduce using rule 18 (statement -> print_statement SEMICOLON .)
    ALTER           reduce using rule 18 (statement -> print_statement SEMICOLON .)
    ALTER_B         reduce using rule 18 (statement -> print_statement SEMICOLON .)
    SIGNAL          reduce using rule 18 (statement -> print_statement SEMICOLON .)
    VIEW_SIGNAL     reduce using rule 18 (statement -> print_statement SEMICOLON .)
    IS_TRUE         reduce using rule 18 (statement -> print_statement SEMICOLON .)
    CASE            reduce using rule 18 (statement -> print_statement SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> print_statement SEMICOLON .)
    CALL            reduce using rule 18 (statement -> print_statement SEMICOLON .)
    PRINT_VALUES    reduce using rule 18 (statement -> print_statement SEMICOLON .)
    RPAREN          reduce using rule 18 (statement -> print_statement SEMICOLON .)


state 48

    (20) variable_declaration -> NEW ID . COMMA type_value

    COMMA           shift and go to state 73


state 49

    (47) variable_update -> VALUES LPAREN . ID COMMA value RPAREN
    (49) variable_with_alter -> VALUES LPAREN . ID COMMA alter_variable RPAREN

    ID              shift and go to state 74


state 50

    (48) alter_variable -> ALTER LPAREN . ID COMMA operator COMMA value RPAREN

    ID              shift and go to state 75


state 51

    (50) alter_b_variable -> ALTER_B LPAREN . ID RPAREN

    ID              shift and go to state 76


state 52

    (51) signal_function -> SIGNAL LPAREN . position_state COMMA position_state RPAREN
    (52) position_state -> . value
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    position_state                 shift and go to state 77
    value                          shift and go to state 78
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 53

    (53) view_signal_function -> VIEW_SIGNAL LPAREN . position_state RPAREN
    (52) position_state -> . value
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    position_state                 shift and go to state 79
    value                          shift and go to state 78
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 54

    (54) is_true_function -> IS_TRUE LPAREN . ID RPAREN

    ID              shift and go to state 80


state 55

    (55) case_statement -> CASE ID . case_options
    (56) case_statement -> CASE ID . case_options else_option
    (57) case_options -> . when_statement
    (58) case_options -> . when_statement case_options
    (59) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    WHEN            shift and go to state 83

    case_options                   shift and go to state 81
    when_statement                 shift and go to state 82

state 56

    (61) while_statement -> WHILE condition . LPAREN statements RPAREN

    LPAREN          shift and go to state 84


state 57

    (35) math_operation_paren -> LPAREN . math_operation RPAREN
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 86
    NUMBER          shift and go to state 87
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    math_operation                 shift and go to state 85
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 58

    (62) condition -> value .

    LPAREN          reduce using rule 62 (condition -> value .)


state 59

    (63) condition -> is_true_function .

    LPAREN          reduce using rule 63 (condition -> is_true_function .)


state 60

    (25) value -> NUMBER .
    (37) math_value -> NUMBER .

    LPAREN          reduce using rule 25 (value -> NUMBER .)
    COMMA           reduce using rule 25 (value -> NUMBER .)
    RPAREN          reduce using rule 25 (value -> NUMBER .)
    THEN            reduce using rule 25 (value -> NUMBER .)
    ADD             reduce using rule 37 (math_value -> NUMBER .)
    SUB             reduce using rule 37 (math_value -> NUMBER .)
    MUL             reduce using rule 37 (math_value -> NUMBER .)
    DIV             reduce using rule 37 (math_value -> NUMBER .)
    REL_OP          reduce using rule 37 (math_value -> NUMBER .)


state 61

    (26) value -> BOOLEAN .

    LPAREN          reduce using rule 26 (value -> BOOLEAN .)
    COMMA           reduce using rule 26 (value -> BOOLEAN .)
    RPAREN          reduce using rule 26 (value -> BOOLEAN .)
    THEN            reduce using rule 26 (value -> BOOLEAN .)


state 62

    (27) value -> STRING .

    LPAREN          reduce using rule 27 (value -> STRING .)
    COMMA           reduce using rule 27 (value -> STRING .)
    RPAREN          reduce using rule 27 (value -> STRING .)
    THEN            reduce using rule 27 (value -> STRING .)


state 63

    (28) value -> ID .
    (36) math_value -> ID .

    LPAREN          reduce using rule 28 (value -> ID .)
    COMMA           reduce using rule 28 (value -> ID .)
    RPAREN          reduce using rule 28 (value -> ID .)
    THEN            reduce using rule 28 (value -> ID .)
    ADD             reduce using rule 36 (math_value -> ID .)
    SUB             reduce using rule 36 (math_value -> ID .)
    MUL             reduce using rule 36 (math_value -> ID .)
    DIV             reduce using rule 36 (math_value -> ID .)
    REL_OP          reduce using rule 36 (math_value -> ID .)


state 64

    (29) value -> arith_op .

    LPAREN          reduce using rule 29 (value -> arith_op .)
    COMMA           reduce using rule 29 (value -> arith_op .)
    RPAREN          reduce using rule 29 (value -> arith_op .)
    THEN            reduce using rule 29 (value -> arith_op .)


state 65

    (30) arith_op -> math_operation .
    (31) math_operation -> math_operation . operator math_operation
    (32) math_operation -> math_operation . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

    LPAREN          reduce using rule 30 (arith_op -> math_operation .)
    COMMA           reduce using rule 30 (arith_op -> math_operation .)
    RPAREN          reduce using rule 30 (arith_op -> math_operation .)
    THEN            reduce using rule 30 (arith_op -> math_operation .)
    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

    operator                       shift and go to state 88

state 66

    (33) math_operation -> math_value . operator math_operation
    (34) math_operation -> math_value . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

    operator                       shift and go to state 94

state 67

    (38) math_value -> math_value_negative .

    ADD             reduce using rule 38 (math_value -> math_value_negative .)
    SUB             reduce using rule 38 (math_value -> math_value_negative .)
    MUL             reduce using rule 38 (math_value -> math_value_negative .)
    DIV             reduce using rule 38 (math_value -> math_value_negative .)
    REL_OP          reduce using rule 38 (math_value -> math_value_negative .)
    LPAREN          reduce using rule 38 (math_value -> math_value_negative .)
    COMMA           reduce using rule 38 (math_value -> math_value_negative .)
    RPAREN          reduce using rule 38 (math_value -> math_value_negative .)
    THEN            reduce using rule 38 (math_value -> math_value_negative .)


state 68

    (39) math_value -> math_operation_paren .

    ADD             reduce using rule 39 (math_value -> math_operation_paren .)
    SUB             reduce using rule 39 (math_value -> math_operation_paren .)
    MUL             reduce using rule 39 (math_value -> math_operation_paren .)
    DIV             reduce using rule 39 (math_value -> math_operation_paren .)
    REL_OP          reduce using rule 39 (math_value -> math_operation_paren .)
    LPAREN          reduce using rule 39 (math_value -> math_operation_paren .)
    COMMA           reduce using rule 39 (math_value -> math_operation_paren .)
    RPAREN          reduce using rule 39 (math_value -> math_operation_paren .)
    THEN            reduce using rule 39 (math_value -> math_operation_paren .)


state 69

    (40) math_value_negative -> SUB . ID
    (41) math_value_negative -> SUB . NUMBER

    ID              shift and go to state 95
    NUMBER          shift and go to state 96


state 70

    (64) procedure_call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 97


state 71

    (65) print_statement -> PRINT_VALUES LPAREN . print_value_list RPAREN
    (66) print_value_list -> . print_value
    (67) print_value_list -> . print_value COMMA print_value_list
    (68) print_value -> . value
    (69) print_value -> . is_true_function
    (70) print_value -> . view_signal_function
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    IS_TRUE         shift and go to state 29
    VIEW_SIGNAL     shift and go to state 28
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    print_value_list               shift and go to state 98
    print_value                    shift and go to state 99
    value                          shift and go to state 100
    is_true_function               shift and go to state 101
    view_signal_function           shift and go to state 102
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 72

    (4) procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .

    PROC            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)
    $end            reduce using rule 4 (procedure -> PROC ID LPAREN statements RPAREN SEMICOLON .)


state 73

    (20) variable_declaration -> NEW ID COMMA . type_value
    (21) type_value -> . LPAREN type COMMA value RPAREN

    LPAREN          shift and go to state 104

    type_value                     shift and go to state 103

state 74

    (47) variable_update -> VALUES LPAREN ID . COMMA value RPAREN
    (49) variable_with_alter -> VALUES LPAREN ID . COMMA alter_variable RPAREN

    COMMA           shift and go to state 105


state 75

    (48) alter_variable -> ALTER LPAREN ID . COMMA operator COMMA value RPAREN

    COMMA           shift and go to state 106


state 76

    (50) alter_b_variable -> ALTER_B LPAREN ID . RPAREN

    RPAREN          shift and go to state 107


state 77

    (51) signal_function -> SIGNAL LPAREN position_state . COMMA position_state RPAREN

    COMMA           shift and go to state 108


state 78

    (52) position_state -> value .

    COMMA           reduce using rule 52 (position_state -> value .)
    RPAREN          reduce using rule 52 (position_state -> value .)


state 79

    (53) view_signal_function -> VIEW_SIGNAL LPAREN position_state . RPAREN

    RPAREN          shift and go to state 109


state 80

    (54) is_true_function -> IS_TRUE LPAREN ID . RPAREN

    RPAREN          shift and go to state 110


state 81

    (55) case_statement -> CASE ID case_options .
    (56) case_statement -> CASE ID case_options . else_option
    (60) else_option -> . ELSE LPAREN statements RPAREN

    SEMICOLON       reduce using rule 55 (case_statement -> CASE ID case_options .)
    ELSE            shift and go to state 112

    else_option                    shift and go to state 111

state 82

    (57) case_options -> when_statement .
    (58) case_options -> when_statement . case_options
    (57) case_options -> . when_statement
    (58) case_options -> . when_statement case_options
    (59) when_statement -> . WHEN value THEN LPAREN statements RPAREN

    ELSE            reduce using rule 57 (case_options -> when_statement .)
    SEMICOLON       reduce using rule 57 (case_options -> when_statement .)
    WHEN            shift and go to state 83

    when_statement                 shift and go to state 82
    case_options                   shift and go to state 113

state 83

    (59) when_statement -> WHEN . value THEN LPAREN statements RPAREN
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    value                          shift and go to state 114
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 84

    (61) while_statement -> WHILE condition LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . procedure_call SEMICOLON
    (18) statement -> . print_statement SEMICOLON
    (19) statement -> . empty
    (20) variable_declaration -> . NEW ID COMMA type_value
    (47) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (48) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (49) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (50) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (51) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (55) case_statement -> . CASE ID case_options
    (56) case_statement -> . CASE ID case_options else_option
    (61) while_statement -> . WHILE condition LPAREN statements RPAREN
    (64) procedure_call -> . CALL LPAREN ID RPAREN
    (65) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (71) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 23
    VALUES          shift and go to state 24
    ALTER           shift and go to state 25
    ALTER_B         shift and go to state 26
    SIGNAL          shift and go to state 27
    VIEW_SIGNAL     shift and go to state 28
    IS_TRUE         shift and go to state 29
    CASE            shift and go to state 30
    WHILE           shift and go to state 31
    CALL            shift and go to state 32
    PRINT_VALUES    shift and go to state 33
    RPAREN          reduce using rule 71 (empty -> .)

  ! NEW             [ reduce using rule 71 (empty -> .) ]
  ! VALUES          [ reduce using rule 71 (empty -> .) ]
  ! ALTER           [ reduce using rule 71 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 71 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 71 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 71 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 71 (empty -> .) ]
  ! CASE            [ reduce using rule 71 (empty -> .) ]
  ! WHILE           [ reduce using rule 71 (empty -> .) ]
  ! CALL            [ reduce using rule 71 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 71 (empty -> .) ]

    statements                     shift and go to state 115
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    procedure_call                 shift and go to state 20
    print_statement                shift and go to state 21
    empty                          shift and go to state 22

state 85

    (35) math_operation_paren -> LPAREN math_operation . RPAREN
    (31) math_operation -> math_operation . operator math_operation
    (32) math_operation -> math_operation . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

    RPAREN          shift and go to state 116
    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

    operator                       shift and go to state 88

state 86

    (36) math_value -> ID .

    ADD             reduce using rule 36 (math_value -> ID .)
    SUB             reduce using rule 36 (math_value -> ID .)
    MUL             reduce using rule 36 (math_value -> ID .)
    DIV             reduce using rule 36 (math_value -> ID .)
    REL_OP          reduce using rule 36 (math_value -> ID .)
    LPAREN          reduce using rule 36 (math_value -> ID .)
    COMMA           reduce using rule 36 (math_value -> ID .)
    RPAREN          reduce using rule 36 (math_value -> ID .)
    THEN            reduce using rule 36 (math_value -> ID .)


state 87

    (37) math_value -> NUMBER .

    ADD             reduce using rule 37 (math_value -> NUMBER .)
    SUB             reduce using rule 37 (math_value -> NUMBER .)
    MUL             reduce using rule 37 (math_value -> NUMBER .)
    DIV             reduce using rule 37 (math_value -> NUMBER .)
    REL_OP          reduce using rule 37 (math_value -> NUMBER .)
    LPAREN          reduce using rule 37 (math_value -> NUMBER .)
    COMMA           reduce using rule 37 (math_value -> NUMBER .)
    RPAREN          reduce using rule 37 (math_value -> NUMBER .)
    THEN            reduce using rule 37 (math_value -> NUMBER .)


state 88

    (31) math_operation -> math_operation operator . math_operation
    (32) math_operation -> math_operation operator . math_value
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 86
    NUMBER          shift and go to state 87
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    math_operation                 shift and go to state 117
    math_value                     shift and go to state 118
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 89

    (42) operator -> ADD .

    ID              reduce using rule 42 (operator -> ADD .)
    NUMBER          reduce using rule 42 (operator -> ADD .)
    SUB             reduce using rule 42 (operator -> ADD .)
    LPAREN          reduce using rule 42 (operator -> ADD .)
    COMMA           reduce using rule 42 (operator -> ADD .)


state 90

    (43) operator -> SUB .

    ID              reduce using rule 43 (operator -> SUB .)
    NUMBER          reduce using rule 43 (operator -> SUB .)
    SUB             reduce using rule 43 (operator -> SUB .)
    LPAREN          reduce using rule 43 (operator -> SUB .)
    COMMA           reduce using rule 43 (operator -> SUB .)


state 91

    (44) operator -> MUL .

    ID              reduce using rule 44 (operator -> MUL .)
    NUMBER          reduce using rule 44 (operator -> MUL .)
    SUB             reduce using rule 44 (operator -> MUL .)
    LPAREN          reduce using rule 44 (operator -> MUL .)
    COMMA           reduce using rule 44 (operator -> MUL .)


state 92

    (45) operator -> DIV .

    ID              reduce using rule 45 (operator -> DIV .)
    NUMBER          reduce using rule 45 (operator -> DIV .)
    SUB             reduce using rule 45 (operator -> DIV .)
    LPAREN          reduce using rule 45 (operator -> DIV .)
    COMMA           reduce using rule 45 (operator -> DIV .)


state 93

    (46) operator -> REL_OP .

    ID              reduce using rule 46 (operator -> REL_OP .)
    NUMBER          reduce using rule 46 (operator -> REL_OP .)
    SUB             reduce using rule 46 (operator -> REL_OP .)
    LPAREN          reduce using rule 46 (operator -> REL_OP .)
    COMMA           reduce using rule 46 (operator -> REL_OP .)


state 94

    (33) math_operation -> math_value operator . math_operation
    (34) math_operation -> math_value operator . math_value
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    ID              shift and go to state 86
    NUMBER          shift and go to state 87
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    math_value                     shift and go to state 119
    math_operation                 shift and go to state 120
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 95

    (40) math_value_negative -> SUB ID .

    ADD             reduce using rule 40 (math_value_negative -> SUB ID .)
    SUB             reduce using rule 40 (math_value_negative -> SUB ID .)
    MUL             reduce using rule 40 (math_value_negative -> SUB ID .)
    DIV             reduce using rule 40 (math_value_negative -> SUB ID .)
    REL_OP          reduce using rule 40 (math_value_negative -> SUB ID .)
    LPAREN          reduce using rule 40 (math_value_negative -> SUB ID .)
    COMMA           reduce using rule 40 (math_value_negative -> SUB ID .)
    RPAREN          reduce using rule 40 (math_value_negative -> SUB ID .)
    THEN            reduce using rule 40 (math_value_negative -> SUB ID .)


state 96

    (41) math_value_negative -> SUB NUMBER .

    ADD             reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    SUB             reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    MUL             reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    DIV             reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    REL_OP          reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    LPAREN          reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    COMMA           reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    RPAREN          reduce using rule 41 (math_value_negative -> SUB NUMBER .)
    THEN            reduce using rule 41 (math_value_negative -> SUB NUMBER .)


state 97

    (64) procedure_call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 121


state 98

    (65) print_statement -> PRINT_VALUES LPAREN print_value_list . RPAREN

    RPAREN          shift and go to state 122


state 99

    (66) print_value_list -> print_value .
    (67) print_value_list -> print_value . COMMA print_value_list

    RPAREN          reduce using rule 66 (print_value_list -> print_value .)
    COMMA           shift and go to state 123


state 100

    (68) print_value -> value .

    COMMA           reduce using rule 68 (print_value -> value .)
    RPAREN          reduce using rule 68 (print_value -> value .)


state 101

    (69) print_value -> is_true_function .

    COMMA           reduce using rule 69 (print_value -> is_true_function .)
    RPAREN          reduce using rule 69 (print_value -> is_true_function .)


state 102

    (70) print_value -> view_signal_function .

    COMMA           reduce using rule 70 (print_value -> view_signal_function .)
    RPAREN          reduce using rule 70 (print_value -> view_signal_function .)


state 103

    (20) variable_declaration -> NEW ID COMMA type_value .

    SEMICOLON       reduce using rule 20 (variable_declaration -> NEW ID COMMA type_value .)


state 104

    (21) type_value -> LPAREN . type COMMA value RPAREN
    (22) type -> . NUM
    (23) type -> . BOOL
    (24) type -> . STRING

    NUM             shift and go to state 125
    BOOL            shift and go to state 126
    STRING          shift and go to state 127

    type                           shift and go to state 124

state 105

    (47) variable_update -> VALUES LPAREN ID COMMA . value RPAREN
    (49) variable_with_alter -> VALUES LPAREN ID COMMA . alter_variable RPAREN
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (48) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    ALTER           shift and go to state 25
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    value                          shift and go to state 128
    alter_variable                 shift and go to state 129
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 106

    (48) alter_variable -> ALTER LPAREN ID COMMA . operator COMMA value RPAREN
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

    operator                       shift and go to state 130

state 107

    (50) alter_b_variable -> ALTER_B LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 50 (alter_b_variable -> ALTER_B LPAREN ID RPAREN .)


state 108

    (51) signal_function -> SIGNAL LPAREN position_state COMMA . position_state RPAREN
    (52) position_state -> . value
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    position_state                 shift and go to state 131
    value                          shift and go to state 78
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 109

    (53) view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .

    SEMICOLON       reduce using rule 53 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    COMMA           reduce using rule 53 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)
    RPAREN          reduce using rule 53 (view_signal_function -> VIEW_SIGNAL LPAREN position_state RPAREN .)


state 110

    (54) is_true_function -> IS_TRUE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 54 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    LPAREN          reduce using rule 54 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    COMMA           reduce using rule 54 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 54 (is_true_function -> IS_TRUE LPAREN ID RPAREN .)


state 111

    (56) case_statement -> CASE ID case_options else_option .

    SEMICOLON       reduce using rule 56 (case_statement -> CASE ID case_options else_option .)


state 112

    (60) else_option -> ELSE . LPAREN statements RPAREN

    LPAREN          shift and go to state 132


state 113

    (58) case_options -> when_statement case_options .

    ELSE            reduce using rule 58 (case_options -> when_statement case_options .)
    SEMICOLON       reduce using rule 58 (case_options -> when_statement case_options .)


state 114

    (59) when_statement -> WHEN value . THEN LPAREN statements RPAREN

    THEN            shift and go to state 133


state 115

    (61) while_statement -> WHILE condition LPAREN statements . RPAREN

    RPAREN          shift and go to state 134


state 116

    (35) math_operation_paren -> LPAREN math_operation RPAREN .

    ADD             reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    SUB             reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    MUL             reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    DIV             reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    REL_OP          reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    LPAREN          reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    COMMA           reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    RPAREN          reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)
    THEN            reduce using rule 35 (math_operation_paren -> LPAREN math_operation RPAREN .)


state 117

    (31) math_operation -> math_operation operator math_operation .
    (31) math_operation -> math_operation . operator math_operation
    (32) math_operation -> math_operation . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 31 (math_operation -> math_operation operator math_operation .)
    COMMA           reduce using rule 31 (math_operation -> math_operation operator math_operation .)
    RPAREN          reduce using rule 31 (math_operation -> math_operation operator math_operation .)
    THEN            reduce using rule 31 (math_operation -> math_operation operator math_operation .)
    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

  ! ADD             [ reduce using rule 31 (math_operation -> math_operation operator math_operation .) ]
  ! SUB             [ reduce using rule 31 (math_operation -> math_operation operator math_operation .) ]
  ! MUL             [ reduce using rule 31 (math_operation -> math_operation operator math_operation .) ]
  ! DIV             [ reduce using rule 31 (math_operation -> math_operation operator math_operation .) ]
  ! REL_OP          [ reduce using rule 31 (math_operation -> math_operation operator math_operation .) ]

    operator                       shift and go to state 88

state 118

    (32) math_operation -> math_operation operator math_value .
    (33) math_operation -> math_value . operator math_operation
    (34) math_operation -> math_value . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 32 (math_operation -> math_operation operator math_value .)
    COMMA           reduce using rule 32 (math_operation -> math_operation operator math_value .)
    RPAREN          reduce using rule 32 (math_operation -> math_operation operator math_value .)
    THEN            reduce using rule 32 (math_operation -> math_operation operator math_value .)
    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

  ! ADD             [ reduce using rule 32 (math_operation -> math_operation operator math_value .) ]
  ! SUB             [ reduce using rule 32 (math_operation -> math_operation operator math_value .) ]
  ! MUL             [ reduce using rule 32 (math_operation -> math_operation operator math_value .) ]
  ! DIV             [ reduce using rule 32 (math_operation -> math_operation operator math_value .) ]
  ! REL_OP          [ reduce using rule 32 (math_operation -> math_operation operator math_value .) ]

    operator                       shift and go to state 94

state 119

    (34) math_operation -> math_value operator math_value .
    (33) math_operation -> math_value . operator math_operation
    (34) math_operation -> math_value . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 34 (math_operation -> math_value operator math_value .)
    COMMA           reduce using rule 34 (math_operation -> math_value operator math_value .)
    RPAREN          reduce using rule 34 (math_operation -> math_value operator math_value .)
    THEN            reduce using rule 34 (math_operation -> math_value operator math_value .)
    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

  ! ADD             [ reduce using rule 34 (math_operation -> math_value operator math_value .) ]
  ! SUB             [ reduce using rule 34 (math_operation -> math_value operator math_value .) ]
  ! MUL             [ reduce using rule 34 (math_operation -> math_value operator math_value .) ]
  ! DIV             [ reduce using rule 34 (math_operation -> math_value operator math_value .) ]
  ! REL_OP          [ reduce using rule 34 (math_operation -> math_value operator math_value .) ]

    operator                       shift and go to state 94

state 120

    (33) math_operation -> math_value operator math_operation .
    (31) math_operation -> math_operation . operator math_operation
    (32) math_operation -> math_operation . operator math_value
    (42) operator -> . ADD
    (43) operator -> . SUB
    (44) operator -> . MUL
    (45) operator -> . DIV
    (46) operator -> . REL_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
    LPAREN          reduce using rule 33 (math_operation -> math_value operator math_operation .)
    COMMA           reduce using rule 33 (math_operation -> math_value operator math_operation .)
    RPAREN          reduce using rule 33 (math_operation -> math_value operator math_operation .)
    THEN            reduce using rule 33 (math_operation -> math_value operator math_operation .)
    ADD             shift and go to state 89
    SUB             shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    REL_OP          shift and go to state 93

  ! ADD             [ reduce using rule 33 (math_operation -> math_value operator math_operation .) ]
  ! SUB             [ reduce using rule 33 (math_operation -> math_value operator math_operation .) ]
  ! MUL             [ reduce using rule 33 (math_operation -> math_value operator math_operation .) ]
  ! DIV             [ reduce using rule 33 (math_operation -> math_value operator math_operation .) ]
  ! REL_OP          [ reduce using rule 33 (math_operation -> math_value operator math_operation .) ]

    operator                       shift and go to state 88

state 121

    (64) procedure_call -> CALL LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 64 (procedure_call -> CALL LPAREN ID RPAREN .)


state 122

    (65) print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .

    SEMICOLON       reduce using rule 65 (print_statement -> PRINT_VALUES LPAREN print_value_list RPAREN .)


state 123

    (67) print_value_list -> print_value COMMA . print_value_list
    (66) print_value_list -> . print_value
    (67) print_value_list -> . print_value COMMA print_value_list
    (68) print_value -> . value
    (69) print_value -> . is_true_function
    (70) print_value -> . view_signal_function
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    IS_TRUE         shift and go to state 29
    VIEW_SIGNAL     shift and go to state 28
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    print_value                    shift and go to state 99
    print_value_list               shift and go to state 135
    value                          shift and go to state 100
    is_true_function               shift and go to state 101
    view_signal_function           shift and go to state 102
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 124

    (21) type_value -> LPAREN type . COMMA value RPAREN

    COMMA           shift and go to state 136


state 125

    (22) type -> NUM .

    COMMA           reduce using rule 22 (type -> NUM .)


state 126

    (23) type -> BOOL .

    COMMA           reduce using rule 23 (type -> BOOL .)


state 127

    (24) type -> STRING .

    COMMA           reduce using rule 24 (type -> STRING .)


state 128

    (47) variable_update -> VALUES LPAREN ID COMMA value . RPAREN

    RPAREN          shift and go to state 137


state 129

    (49) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable . RPAREN

    RPAREN          shift and go to state 138


state 130

    (48) alter_variable -> ALTER LPAREN ID COMMA operator . COMMA value RPAREN

    COMMA           shift and go to state 139


state 131

    (51) signal_function -> SIGNAL LPAREN position_state COMMA position_state . RPAREN

    RPAREN          shift and go to state 140


state 132

    (60) else_option -> ELSE LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . procedure_call SEMICOLON
    (18) statement -> . print_statement SEMICOLON
    (19) statement -> . empty
    (20) variable_declaration -> . NEW ID COMMA type_value
    (47) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (48) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (49) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (50) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (51) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (55) case_statement -> . CASE ID case_options
    (56) case_statement -> . CASE ID case_options else_option
    (61) while_statement -> . WHILE condition LPAREN statements RPAREN
    (64) procedure_call -> . CALL LPAREN ID RPAREN
    (65) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (71) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 23
    VALUES          shift and go to state 24
    ALTER           shift and go to state 25
    ALTER_B         shift and go to state 26
    SIGNAL          shift and go to state 27
    VIEW_SIGNAL     shift and go to state 28
    IS_TRUE         shift and go to state 29
    CASE            shift and go to state 30
    WHILE           shift and go to state 31
    CALL            shift and go to state 32
    PRINT_VALUES    shift and go to state 33
    RPAREN          reduce using rule 71 (empty -> .)

  ! NEW             [ reduce using rule 71 (empty -> .) ]
  ! VALUES          [ reduce using rule 71 (empty -> .) ]
  ! ALTER           [ reduce using rule 71 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 71 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 71 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 71 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 71 (empty -> .) ]
  ! CASE            [ reduce using rule 71 (empty -> .) ]
  ! WHILE           [ reduce using rule 71 (empty -> .) ]
  ! CALL            [ reduce using rule 71 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 71 (empty -> .) ]

    statements                     shift and go to state 141
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    procedure_call                 shift and go to state 20
    print_statement                shift and go to state 21
    empty                          shift and go to state 22

state 133

    (59) when_statement -> WHEN value THEN . LPAREN statements RPAREN

    LPAREN          shift and go to state 142


state 134

    (61) while_statement -> WHILE condition LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 61 (while_statement -> WHILE condition LPAREN statements RPAREN .)


state 135

    (67) print_value_list -> print_value COMMA print_value_list .

    RPAREN          reduce using rule 67 (print_value_list -> print_value COMMA print_value_list .)


state 136

    (21) type_value -> LPAREN type COMMA . value RPAREN
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    value                          shift and go to state 143
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 137

    (47) variable_update -> VALUES LPAREN ID COMMA value RPAREN .

    SEMICOLON       reduce using rule 47 (variable_update -> VALUES LPAREN ID COMMA value RPAREN .)


state 138

    (49) variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .

    SEMICOLON       reduce using rule 49 (variable_with_alter -> VALUES LPAREN ID COMMA alter_variable RPAREN .)


state 139

    (48) alter_variable -> ALTER LPAREN ID COMMA operator COMMA . value RPAREN
    (25) value -> . NUMBER
    (26) value -> . BOOLEAN
    (27) value -> . STRING
    (28) value -> . ID
    (29) value -> . arith_op
    (30) arith_op -> . math_operation
    (31) math_operation -> . math_operation operator math_operation
    (32) math_operation -> . math_operation operator math_value
    (33) math_operation -> . math_value operator math_operation
    (34) math_operation -> . math_value operator math_value
    (36) math_value -> . ID
    (37) math_value -> . NUMBER
    (38) math_value -> . math_value_negative
    (39) math_value -> . math_operation_paren
    (40) math_value_negative -> . SUB ID
    (41) math_value_negative -> . SUB NUMBER
    (35) math_operation_paren -> . LPAREN math_operation RPAREN

    NUMBER          shift and go to state 60
    BOOLEAN         shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63
    SUB             shift and go to state 69
    LPAREN          shift and go to state 57

    value                          shift and go to state 144
    arith_op                       shift and go to state 64
    math_operation                 shift and go to state 65
    math_value                     shift and go to state 66
    math_value_negative            shift and go to state 67
    math_operation_paren           shift and go to state 68

state 140

    (51) signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .

    SEMICOLON       reduce using rule 51 (signal_function -> SIGNAL LPAREN position_state COMMA position_state RPAREN .)


state 141

    (60) else_option -> ELSE LPAREN statements . RPAREN

    RPAREN          shift and go to state 145


state 142

    (59) when_statement -> WHEN value THEN LPAREN . statements RPAREN
    (5) statements -> . statement
    (6) statements -> . statement statements
    (7) statement -> . variable_declaration SEMICOLON
    (8) statement -> . variable_update SEMICOLON
    (9) statement -> . alter_variable SEMICOLON
    (10) statement -> . variable_with_alter SEMICOLON
    (11) statement -> . alter_b_variable SEMICOLON
    (12) statement -> . signal_function SEMICOLON
    (13) statement -> . view_signal_function SEMICOLON
    (14) statement -> . is_true_function SEMICOLON
    (15) statement -> . case_statement SEMICOLON
    (16) statement -> . while_statement SEMICOLON
    (17) statement -> . procedure_call SEMICOLON
    (18) statement -> . print_statement SEMICOLON
    (19) statement -> . empty
    (20) variable_declaration -> . NEW ID COMMA type_value
    (47) variable_update -> . VALUES LPAREN ID COMMA value RPAREN
    (48) alter_variable -> . ALTER LPAREN ID COMMA operator COMMA value RPAREN
    (49) variable_with_alter -> . VALUES LPAREN ID COMMA alter_variable RPAREN
    (50) alter_b_variable -> . ALTER_B LPAREN ID RPAREN
    (51) signal_function -> . SIGNAL LPAREN position_state COMMA position_state RPAREN
    (53) view_signal_function -> . VIEW_SIGNAL LPAREN position_state RPAREN
    (54) is_true_function -> . IS_TRUE LPAREN ID RPAREN
    (55) case_statement -> . CASE ID case_options
    (56) case_statement -> . CASE ID case_options else_option
    (61) while_statement -> . WHILE condition LPAREN statements RPAREN
    (64) procedure_call -> . CALL LPAREN ID RPAREN
    (65) print_statement -> . PRINT_VALUES LPAREN print_value_list RPAREN
    (71) empty -> .

  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for VALUES resolved as shift
  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for ALTER_B resolved as shift
  ! shift/reduce conflict for SIGNAL resolved as shift
  ! shift/reduce conflict for VIEW_SIGNAL resolved as shift
  ! shift/reduce conflict for IS_TRUE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for PRINT_VALUES resolved as shift
    NEW             shift and go to state 23
    VALUES          shift and go to state 24
    ALTER           shift and go to state 25
    ALTER_B         shift and go to state 26
    SIGNAL          shift and go to state 27
    VIEW_SIGNAL     shift and go to state 28
    IS_TRUE         shift and go to state 29
    CASE            shift and go to state 30
    WHILE           shift and go to state 31
    CALL            shift and go to state 32
    PRINT_VALUES    shift and go to state 33
    RPAREN          reduce using rule 71 (empty -> .)

  ! NEW             [ reduce using rule 71 (empty -> .) ]
  ! VALUES          [ reduce using rule 71 (empty -> .) ]
  ! ALTER           [ reduce using rule 71 (empty -> .) ]
  ! ALTER_B         [ reduce using rule 71 (empty -> .) ]
  ! SIGNAL          [ reduce using rule 71 (empty -> .) ]
  ! VIEW_SIGNAL     [ reduce using rule 71 (empty -> .) ]
  ! IS_TRUE         [ reduce using rule 71 (empty -> .) ]
  ! CASE            [ reduce using rule 71 (empty -> .) ]
  ! WHILE           [ reduce using rule 71 (empty -> .) ]
  ! CALL            [ reduce using rule 71 (empty -> .) ]
  ! PRINT_VALUES    [ reduce using rule 71 (empty -> .) ]

    statements                     shift and go to state 146
    statement                      shift and go to state 9
    variable_declaration           shift and go to state 10
    variable_update                shift and go to state 11
    alter_variable                 shift and go to state 12
    variable_with_alter            shift and go to state 13
    alter_b_variable               shift and go to state 14
    signal_function                shift and go to state 15
    view_signal_function           shift and go to state 16
    is_true_function               shift and go to state 17
    case_statement                 shift and go to state 18
    while_statement                shift and go to state 19
    procedure_call                 shift and go to state 20
    print_statement                shift and go to state 21
    empty                          shift and go to state 22

state 143

    (21) type_value -> LPAREN type COMMA value . RPAREN

    RPAREN          shift and go to state 147


state 144

    (48) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value . RPAREN

    RPAREN          shift and go to state 148


state 145

    (60) else_option -> ELSE LPAREN statements RPAREN .

    SEMICOLON       reduce using rule 60 (else_option -> ELSE LPAREN statements RPAREN .)


state 146

    (59) when_statement -> WHEN value THEN LPAREN statements . RPAREN

    RPAREN          shift and go to state 149


state 147

    (21) type_value -> LPAREN type COMMA value RPAREN .

    SEMICOLON       reduce using rule 21 (type_value -> LPAREN type COMMA value RPAREN .)


state 148

    (48) alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .

    SEMICOLON       reduce using rule 48 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)
    RPAREN          reduce using rule 48 (alter_variable -> ALTER LPAREN ID COMMA operator COMMA value RPAREN .)


state 149

    (59) when_statement -> WHEN value THEN LPAREN statements RPAREN .

    WHEN            reduce using rule 59 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    ELSE            reduce using rule 59 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)
    SEMICOLON       reduce using rule 59 (when_statement -> WHEN value THEN LPAREN statements RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEW in state 7 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 7 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 7 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 7 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 7 resolved as shift
WARNING: shift/reduce conflict for CASE in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for CALL in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 7 resolved as shift
WARNING: shift/reduce conflict for NEW in state 9 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 9 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 9 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 9 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 9 resolved as shift
WARNING: shift/reduce conflict for CASE in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for CALL in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 9 resolved as shift
WARNING: shift/reduce conflict for NEW in state 84 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 84 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 84 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 84 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 84 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 84 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 84 resolved as shift
WARNING: shift/reduce conflict for CASE in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for CALL in state 84 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 84 resolved as shift
WARNING: shift/reduce conflict for ADD in state 117 resolved as shift
WARNING: shift/reduce conflict for SUB in state 117 resolved as shift
WARNING: shift/reduce conflict for MUL in state 117 resolved as shift
WARNING: shift/reduce conflict for DIV in state 117 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for ADD in state 118 resolved as shift
WARNING: shift/reduce conflict for SUB in state 118 resolved as shift
WARNING: shift/reduce conflict for MUL in state 118 resolved as shift
WARNING: shift/reduce conflict for DIV in state 118 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 118 resolved as shift
WARNING: shift/reduce conflict for ADD in state 119 resolved as shift
WARNING: shift/reduce conflict for SUB in state 119 resolved as shift
WARNING: shift/reduce conflict for MUL in state 119 resolved as shift
WARNING: shift/reduce conflict for DIV in state 119 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 119 resolved as shift
WARNING: shift/reduce conflict for ADD in state 120 resolved as shift
WARNING: shift/reduce conflict for SUB in state 120 resolved as shift
WARNING: shift/reduce conflict for MUL in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV in state 120 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 120 resolved as shift
WARNING: shift/reduce conflict for NEW in state 132 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 132 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 132 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 132 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 132 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 132 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 132 resolved as shift
WARNING: shift/reduce conflict for CASE in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for CALL in state 132 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 132 resolved as shift
WARNING: shift/reduce conflict for NEW in state 142 resolved as shift
WARNING: shift/reduce conflict for VALUES in state 142 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 142 resolved as shift
WARNING: shift/reduce conflict for ALTER_B in state 142 resolved as shift
WARNING: shift/reduce conflict for SIGNAL in state 142 resolved as shift
WARNING: shift/reduce conflict for VIEW_SIGNAL in state 142 resolved as shift
WARNING: shift/reduce conflict for IS_TRUE in state 142 resolved as shift
WARNING: shift/reduce conflict for CASE in state 142 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 142 resolved as shift
WARNING: shift/reduce conflict for CALL in state 142 resolved as shift
WARNING: shift/reduce conflict for PRINT_VALUES in state 142 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 9
